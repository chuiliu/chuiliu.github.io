<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[lonica]]></title>
  <subtitle><![CDATA[什么鬼]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://chuiliu.github.io/"/>
  <updated>2017-01-03T15:34:29.978Z</updated>
  <id>http://chuiliu.github.io/</id>
  
  <author>
    <name><![CDATA[lonica]]></name>
    <email><![CDATA[767079315@qq.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Canvas 实现位图转像素画]]></title>
    <link href="http://chuiliu.github.io/2016/12/31/canvas%E5%AE%9E%E7%8E%B0%E4%BD%8D%E5%9B%BE%E8%BD%AC%E5%83%8F%E7%B4%A0%E7%94%BB/"/>
    <id>http://chuiliu.github.io/2016/12/31/canvas实现位图转像素画/</id>
    <published>2016-12-31T05:55:37.000Z</published>
    <updated>2017-01-03T15:34:29.978Z</updated>
    <content type="html"><![CDATA[<p>2016 年快结束了，最后一天总要留下点什么。</p>
<p><img src="http://o743aqnrb.bkt.clouddn.com/canvas%E8%BD%AC%E5%83%8F%E7%B4%A0%E5%9B%BE/re.gif" alt=""></p>
<a id="more"></a>
<p>前段时间迷上<a href="http://chuiliu.github.io/2016/12/06/%E7%A8%8B%E5%BA%8F%E5%91%98%E4%B8%8E%E7%94%BB%E5%AE%B6/">像素画</a>，折腾了好一段时间，后来思考了下，能不能用程序或者有什么图像处理软件能把一张图片直接转成像素风格？<br>于是先谷歌一下，在豆瓣发现了这个很棒的小站，<a href="https://site.douban.com/163509/" target="_blank" rel="external">教你画像素画</a>，其中有朋友分享一个PS处理的方法：<a href="https://site.douban.com/163509/widget/notes/8695193/note/317941543/" target="_blank" rel="external">位图快速转像素</a>，这个方法处理对比度强的图片效果是不错的，于是我按照同样的思路，尝试用<code>Canvas</code>来完成同样的效果，纯粹只是不想打开PS。</p>
<p>看最终效果 or 不想折腾PS的 快戳这里：<a href="http://chuiliu.github.io/demo/pixel/" target="_blank">图像转换像素图</a></p>
<h2 id="u601D_u8DEF"><a href="#u601D_u8DEF" class="headerlink" title="思路"></a>思路</h2><blockquote>
<ol>
<li>将一张图片缩小到一定的百分比，比如25%，这时候截图，图片将丢失一些像素信息，对的就是要这种效果。</li>
<li>使用PS的阈值功能，将此时的图片处理，在设置合适的阈值下，让图片达到最佳显示效果。</li>
<li>最后将图片放大至看到像素点，就能看到我们要的像素化效果。</li>
</ol>
</blockquote>
<p>那么，用<code>Canvas</code>怎么实现呢？</p>
<p>首先应该理解阈值的概念，阈值可以理解为临界值，大于临界值呈现一种状态，小于临界值又呈现另一种状态。PS中阈值可以将图片变成黑白图像，阈值的范围是<code>0~255</code>，假设阈值是192，则PS会将亮度小于192的像素点转成黑色，将亮度大于192的转成白色。</p>
<h2 id="getImageData"><a href="#getImageData" class="headerlink" title="getImageData"></a>getImageData</h2><p><code>Canvas</code>的<code>ImageData</code>对象可以得到图像的所有信息，<code>imageData.data</code>是一个保存着图片像素信息的数组，数组中每个值的范围是0~255，每四个值表示一个像素点的颜色信息，格式是这样的：<code>imageData.data = [像素点1的R, 像素点1的G, 像素点1的B, 像素点1的A, 像素点2的R, 像素点2的G, 像素点2的B, 像素点2的A, ... , 像素点n的A]</code>。</p>
<pre><code>var pixel = ctx.getImageData(x, y, width, height);
</code></pre><h2 id="putImageData"><a href="#putImageData" class="headerlink" title="putImageData"></a>putImageData</h2><p>对<code>imageData.data</code>数组做修改后，可以通过<code>putImageData</code>写入修改后的像素数据。</p>
<pre><code>ctx.putImageData(imageData, x, y);
</code></pre><h2 id="u5B9E_u73B0"><a href="#u5B9E_u73B0" class="headerlink" title="实现"></a>实现</h2><h3 id="u7F29_u5C0F_u56FE_u50CF"><a href="#u7F29_u5C0F_u56FE_u50CF" class="headerlink" title="缩小图像"></a>缩小图像</h3><pre><code>var scale = 0.25;
ctx.drawImage(image, 0, 0, image.width * scale, image.height * scale);
</code></pre><h3 id="u7070_u5EA6_u5316_u5E76_u9608_u503C_u5904_u7406"><a href="#u7070_u5EA6_u5316_u5E76_u9608_u503C_u5904_u7406" class="headerlink" title="灰度化并阈值处理"></a>灰度化并阈值处理</h3><p>为了实现最终效果，我这里是将图片的所有像素信息先灰度化，替代亮度信息，然后每个像素点的灰度值与设定的阈值相比较，大于阈值的显示为白色，小于阈值的显示为黑色。</p>
<pre><code>// 灰度值的计算公式，由rgb值计算
var gray = 0.299 * r + 0.587 * g + 0.114 * b;
</code></pre><p>阈值处理的方法实现：</p>
<pre><code class="javascript">/**
 * [convert description]
 * @param  {[type]} ctx       [description]
 * @param  {[type]} imageData [description]
 * @param  {[type]} threshold [阈值]
 * @return {[type]}           [description]
 */
function convert(ctx, imageData, threshold) {
    var data = imageData.data;
    for (var i = 0; i &lt; data.length; i += 4) {
        // 灰度计算公式
        var gray = 0.299 * data[i] + 0.587 * data[i + 1] + 0.114 *data[i + 2];
        var color = gray &gt;= threshold ? 255 : 0;
        var alpha = data[i + 3];
        data[i]     = color;                         // red
        data[i + 1] = color;                         // green
        data[i + 2] = color;                         // blue
        data[i + 3] = alpha &gt;= threshold ? 255 : 0;  // alpha, 去掉png图透明
    }
    ctx.putImageData(imageData, 0, 0);
}
</code></pre>
<h3 id="u5C06_u56FE_u50CF_u8FD8_u539F_u5927_u5C0F"><a href="#u5C06_u56FE_u50CF_u8FD8_u539F_u5927_u5C0F" class="headerlink" title="将图像还原大小"></a>将图像还原大小</h3><pre><code>ctx.drawImage(image, 0, 0, image.width / scale, image.height / scale);
</code></pre><h3 id="u53CD_u952F_u9F7F_u5904_u7406"><a href="#u53CD_u952F_u9F7F_u5904_u7406" class="headerlink" title="反锯齿处理"></a>反锯齿处理</h3><p>小图经过放大默认是模糊的，将<code>imageSmoothingEnabled</code>置为<code>false</code>才能清晰显示像素点。</p>
<pre><code>ctx.imageSmoothingEnabled = false;
ctx.mozImageSmoothingEnabled = false;
ctx.webkitImageSmoothingEnabled = false;
ctx.msImageSmoothingEnabled = false;
</code></pre><p>完整的代码已经上传至 github（<a href="https://github.com/chuiliu/the-pixel-art" target="_blank" rel="external">https://github.com/chuiliu/the-pixel-art</a>）</p>
<p>来，看效果（左图为原图）：</p>
<p><img src="http://o743aqnrb.bkt.clouddn.com/canvas%E8%BD%AC%E5%83%8F%E7%B4%A0%E5%9B%BE/we_are_bear_source.jpg"> <img src="http://o743aqnrb.bkt.clouddn.com/canvas%E8%BD%AC%E5%83%8F%E7%B4%A0%E5%9B%BE/we_are_bear_dest.png"><br><img src="http://o743aqnrb.bkt.clouddn.com/canvas%E8%BD%AC%E5%83%8F%E7%B4%A0%E5%9B%BE/%E7%9A%AE%E5%8D%A1%E4%B8%98-0.jpg"> <img src="http://o743aqnrb.bkt.clouddn.com/canvas%E8%BD%AC%E5%83%8F%E7%B4%A0%E5%9B%BE/%E7%9A%AE%E5%8D%A1%E4%B8%98-1.jpg"></p>
<p>对于对比度强的图片，不进行阈值处理也可以有不错的效果</p>
<p><img src="http://o743aqnrb.bkt.clouddn.com/canvas%E8%BD%AC%E5%83%8F%E7%B4%A0%E5%9B%BE/tree.jpg"> <img src="http://o743aqnrb.bkt.clouddn.com/canvas%E8%BD%AC%E5%83%8F%E7%B4%A0%E5%9B%BE/tree.png"></p>
<p>最终效果还是可以，但是这个方法本身存在一定局限性，对于对比度不高的图片效果很差，几乎不适用。所以玩的时候是比较挑图片的。</p>
<p>在线版仅支持高版本浏览器，欢迎试玩，<a href="http://chuiliu.github.io/demo/pixel/">快戳这里</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>2016 年快结束了，最后一天总要留下点什么。</p>
<p><img src="http://o743aqnrb.bkt.clouddn.com/canvas%E8%BD%AC%E5%83%8F%E7%B4%A0%E5%9B%BE/re.gif" alt=""></p>]]>
    
    </summary>
    
      <category term="Javascript" scheme="http://chuiliu.github.io/tags/Javascript/"/>
    
      <category term="canvas" scheme="http://chuiliu.github.io/tags/canvas/"/>
    
      <category term="前端" scheme="http://chuiliu.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="前端" scheme="http://chuiliu.github.io/categories/fe/"/>
    
      <category term="折腾" scheme="http://chuiliu.github.io/categories/fe/%E6%8A%98%E8%85%BE/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[实现footer在页面底部]]></title>
    <link href="http://chuiliu.github.io/2016/12/08/%E5%AE%9E%E7%8E%B0footer%E5%9C%A8%E9%A1%B5%E9%9D%A2%E5%BA%95%E9%83%A8/"/>
    <id>http://chuiliu.github.io/2016/12/08/实现footer在页面底部/</id>
    <published>2016-12-08T05:30:30.000Z</published>
    <updated>2016-12-10T15:38:13.411Z</updated>
    <content type="html"><![CDATA[<p>突然发现自己写的hexo模板有点问题，当页面主体高度不够的时候，footer页脚也跟着往上移，不在整个页面的底部了，很不协调，看着也不舒服。于是问题就来了，如何解决。</p>
<h2 id="u5728footer_u4F7F_u7528_u8D1F_u7684margin-top"><a href="#u5728footer_u4F7F_u7528_u8D1F_u7684margin-top" class="headerlink" title="在footer使用负的margin-top"></a>在footer使用负的margin-top</h2><p>思路：将页面主体部分的<code>min-height</code>设为100%，于是页面就可以充满整个浏览器窗口了，footer就不会低于页面高度了，然后footer部分再使用负的<code>margin-top</code>来使footer往上移，这样就刚好置于页面底部。但这时候需要一个空的标签来保持主体部分距离底部的高度等于footer高度，防止文字覆盖在footer上面。</p>
<pre><code class="html">&lt;body&gt;
    &lt;div class=&quot;content&quot;&gt;
         主体正文
        &lt;div class=&quot;fix&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;footer class=&quot;footer&quot;&gt;
        底栏固定
    &lt;/footer&gt;
    &lt;/body&gt;
&lt;/body&gt;
</code></pre>
<a id="more"></a>
<pre><code class="css">html, body, div, footer {margin:  0;padding: 0;}
html, body {
    height: 100%;
}
.content {
    min-height: 100%;
}
.fix {
    height: 100px;
}
.footer {
    margin-top: -100px;
    height: 100px;
    color: #fff;
    background-color: #313131;
}
</code></pre>
<p>缺点：多了个辅助用的空标签，有种hack的感觉</p>
<h2 id="u5728_u9875_u9762_u4E3B_u4F53_u90E8_u5206_u4F7F_u7528_u8D1F_u7684margin-bottom"><a href="#u5728_u9875_u9762_u4E3B_u4F53_u90E8_u5206_u4F7F_u7528_u8D1F_u7684margin-bottom" class="headerlink" title="在页面主体部分使用负的margin-bottom"></a>在页面主体部分使用负的margin-bottom</h2><p>实现思路和上面的方法类似，html结构同上，缺点也是需要一个空标签。</p>
<pre><code class="css">html, body {
    height: 100%;
}
.content {
    min-height: 100%;
    margin-bottom: -100px;
}
.footer,
.fix {
    height: 100px;
}
</code></pre>
<h2 id="footer_u7528_u7EDD_u5BF9_u5B9A_u4F4D"><a href="#footer_u7528_u7EDD_u5BF9_u5B9A_u4F4D" class="headerlink" title="footer用绝对定位"></a>footer用绝对定位</h2><p>思路：body的<code>min-height</code>设为100%，并相对定位，然后footer用绝对定位固定在底部，主体部分用与footer相等高度的<code>padding-bottom</code>来控制底部距离。</p>
<pre><code class="html">&lt;body&gt;
    &lt;div class=&quot;content&quot;&gt;页面主体&lt;/div&gt;
    &lt;footer class=&quot;footer&quot;&gt;底栏固定&lt;/footer&gt;
&lt;/body&gt;
</code></pre>
<pre><code class="css">html {
    height: 100%;
}
body {
    min-height: 100%;
    position: relative;
}
.content {
    padding-bottom: 100px;
}
.footer {
    position: absolute;
    bottom: 0;
    width: 100%;
    height: 100px;
}
</code></pre>
<h2 id="u901A_u8FC7_u8BA1_u7B97_u5C5E_u6027_u6765_u8BA1_u7B97_u9875_u9762_u4E3B_u4F53_u9AD8_u5EA6"><a href="#u901A_u8FC7_u8BA1_u7B97_u5C5E_u6027_u6765_u8BA1_u7B97_u9875_u9762_u4E3B_u4F53_u9AD8_u5EA6" class="headerlink" title="通过计算属性来计算页面主体高度"></a>通过计算属性来计算页面主体高度</h2><p>看到有文章写用Javascript来解决，我感觉不太好，但用上同样的道理，css3的<code>calc()</code>也可以解决，虽然说兼容性差了点。<br>思路：footer高度固定，通过计算控制页面主体部分的高度，<code>1vh</code>等于视口高度的<code>1%</code></p>
<pre><code class="html">&lt;body&gt;
    &lt;div class=&quot;content&quot;&gt;页面主体&lt;/div&gt;
    &lt;footer class=&quot;footer&quot;&gt;页面底栏&lt;/footer&gt;
&lt;/body&gt;
</code></pre>
<pre><code class="css">html, body {
    height: 100%;
}
.content {
    min-height: calc(100vh - 100px);
}
.footer {
    height: 100px;
}
</code></pre>
<p>缺点：兼容性差</p>
<h2 id="flexbox"><a href="#flexbox" class="headerlink" title="flexbox"></a>flexbox</h2><p>在这篇文章 <a href="https://css-tricks.com/couple-takes-sticky-footer/" target="_blank" rel="external">Sticky Footer, Five Ways</a> 中看到还有两种比较新鲜的实现方式，采用<code>flex</code>和<code>CSS Grid</code>。</p>
<p><code>flex</code>的方法是这样的，因为<code>flexbox</code>元素可以在容器中填充满，因此只要将<code>body</code>变成<code>flex</code>布局，然后控制<code>body</code>的<code>min-height</code>为100%就行了，页面主体部分是<code>flex</code>元素就会自动伸缩了。</p>
<pre><code class="html">&lt;body&gt;
    &lt;div class=&quot;content&quot;&gt;
    content
    &lt;/div&gt;
    &lt;footer class=&quot;footer&quot;&gt;&lt;/footer&gt;
&lt;/body&gt;
</code></pre>
<pre><code class="css">html {
    height: 100%;
}
body {
    min-height: 100%;
    display: flex;
    flex-direction: column;
}
.content {
    flex: 1;
}
</code></pre>
<p>CSS Grid比较新，个人还没了解过，就不细说了。CSS Grid最近很热的感觉，可能又将是以后的趋势，现在能够支持的浏览器很少。<br>CSS 真是越来越灵活了，解决方案也越来越多。</p>
<p>看到<a href="https://css-tricks.com/couple-takes-sticky-footer/" target="_blank" rel="external">Sticky Footer, Five Ways</a> 这篇文章评论下大家还提出更多的解决方案。另外的方法还有<code>display:table</code>等，文章很不错，推荐阅读，感谢文章作者。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>突然发现自己写的hexo模板有点问题，当页面主体高度不够的时候，footer页脚也跟着往上移，不在整个页面的底部了，很不协调，看着也不舒服。于是问题就来了，如何解决。</p>
<h2 id="u5728footer_u4F7F_u7528_u8D1F_u7684margin-top"><a href="#u5728footer_u4F7F_u7528_u8D1F_u7684margin-top" class="headerlink" title="在footer使用负的margin-top"></a>在footer使用负的margin-top</h2><p>思路：将页面主体部分的<code>min-height</code>设为100%，于是页面就可以充满整个浏览器窗口了，footer就不会低于页面高度了，然后footer部分再使用负的<code>margin-top</code>来使footer往上移，这样就刚好置于页面底部。但这时候需要一个空的标签来保持主体部分距离底部的高度等于footer高度，防止文字覆盖在footer上面。</p>
<pre><code class="html">&lt;body&gt;
    &lt;div class=&quot;content&quot;&gt;
         主体正文
        &lt;div class=&quot;fix&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;footer class=&quot;footer&quot;&gt;
        底栏固定
    &lt;/footer&gt;
    &lt;/body&gt;
&lt;/body&gt;
</code></pre>]]>
    
    </summary>
    
      <category term="CSS" scheme="http://chuiliu.github.io/tags/CSS/"/>
    
      <category term="前端" scheme="http://chuiliu.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="前端" scheme="http://chuiliu.github.io/categories/fe/"/>
    
      <category term="CSS" scheme="http://chuiliu.github.io/categories/fe/CSS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[程序员与画家]]></title>
    <link href="http://chuiliu.github.io/2016/12/06/%E7%A8%8B%E5%BA%8F%E5%91%98%E4%B8%8E%E7%94%BB%E5%AE%B6/"/>
    <id>http://chuiliu.github.io/2016/12/06/程序员与画家/</id>
    <published>2016-12-06T12:45:55.000Z</published>
    <updated>2016-12-14T06:34:58.219Z</updated>
    <content type="html"><![CDATA[<p>最近又在折腾另一款绘图app，<a href="http://dotpicko.net/" target="_blank">dotpict</a>，瞬间中了像素风的毒，这 style 好赞。<br>于是我尝试着点几下，来画个人类。<br>把几个小色块愉快地堆在一起，两个小人就出来了。</p>
<p><img width="192" height="192" src="http://o743aqnrb.bkt.clouddn.com/dotpictboy.png"><img src="http://o743aqnrb.bkt.clouddn.com/dotpictdotpict_20161208_161306.png"></p>
<p>感觉开始画上瘾了。<br>于是我又在 dotpict 上一口气画了6只愤怒的小鸟，不停地点点点，过了一把瘾。<br>有点丑，喜欢绘画又不太会画，就只能长这个拙样子了。<br>最后一只好像被打了一拳的样子，怎都改不好。</p>
<a id="more"></a>
<p><img width="128" src="http://o743aqnrb.bkt.clouddn.com/angrybirdx192/angrybird-red.png"><img width="128" src="http://o743aqnrb.bkt.clouddn.com/angrybirdx192/angrybird-blue.png"><img width="128" src="http://o743aqnrb.bkt.clouddn.com/angrybirdx192/angrybird-yellow.png"><img width="128" src="http://o743aqnrb.bkt.clouddn.com/angrybirdx192/angrybird-green.png"><img width="128" src="http://o743aqnrb.bkt.clouddn.com/angrybirdx192/angrybird-black.png"><img width="128" src="http://o743aqnrb.bkt.clouddn.com/angrybirdx192/angrybird-white.png"></p>
<p>后来想了下，这么简单的点阵式，好像可以用代码来画出来，于是我顺便把这几只鸟从 dotpict 上画的每个点转成矩阵，再用<code>canvas</code>画下来。<br>于是效果就出来了。</p>
<p></p><p data-height="265" data-theme-id="light" data-slug-hash="ZBxVgQ" data-default-tab="js,result" data-user="lonica" data-embed-version="2" data-pen-title="ZBxVgQ" class="codepen">See the Pen <a href="https://codepen.io/lonica/pen/ZBxVgQ/" target="_blank" rel="external">ZBxVgQ</a> by lonica (<a href="http://codepen.io/lonica" target="_blank" rel="external">@lonica</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p>
<script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script>

<p></p><p data-height="265" data-theme-id="light" data-slug-hash="vyRvJJ" data-default-tab="js,result" data-user="lonica" data-embed-version="2" data-pen-title="vyRvJJ" class="codepen">See the Pen <a href="https://codepen.io/lonica/pen/vyRvJJ/" target="_blank" rel="external">vyRvJJ</a> by lonica (<a href="http://codepen.io/lonica" target="_blank" rel="external">@lonica</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><br><!-- <script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script> --><p></p>
<p>后来发现，其实不用<code>canvas</code>那么麻烦，用CSS就可以了，<code>box-shadow</code>也可以实现同样的效果，通过x轴和y轴的位移，也可以画出同样的效果。</p>
<p>于是我让在dotpict上画的小人动起来，用<code>step()</code>实现帧动画的效果。</p>
<p></p><p data-height="565" data-theme-id="light" data-slug-hash="MbPBwN" data-default-tab="css,result" data-user="lonica" data-embed-version="2" data-pen-title="MbPBwN" class="codepen">See the Pen <a href="http://codepen.io/lonica/pen/MbPBwN/" target="_blank" rel="external">MbPBwN</a> by lonica (<a href="http://codepen.io/lonica" target="_blank" rel="external">@lonica</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><br><!-- <script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script> --><p></p>
<p>程序员还是要懂点艺术的。<br>画了株小仙人掌。<img src="http://o743aqnrb.bkt.clouddn.com/%E4%BB%99%E4%BA%BA%E6%8E%8C.png"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近又在折腾另一款绘图app，<a href="http://dotpicko.net/" target="_blank">dotpict</a>，瞬间中了像素风的毒，这 style 好赞。<br>于是我尝试着点几下，来画个人类。<br>把几个小色块愉快地堆在一起，两个小人就出来了。</p>
<p><img width="192" height="192" src="http://o743aqnrb.bkt.clouddn.com/dotpictboy.png"><img src="http://o743aqnrb.bkt.clouddn.com/dotpictdotpict_20161208_161306.png"></p>
<p>感觉开始画上瘾了。<br>于是我又在 dotpict 上一口气画了6只愤怒的小鸟，不停地点点点，过了一把瘾。<br>有点丑，喜欢绘画又不太会画，就只能长这个拙样子了。<br>最后一只好像被打了一拳的样子，怎都改不好。</p>]]>
    
    </summary>
    
      <category term="Javascript" scheme="http://chuiliu.github.io/tags/Javascript/"/>
    
      <category term="canvas" scheme="http://chuiliu.github.io/tags/canvas/"/>
    
      <category term="前端" scheme="http://chuiliu.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="折腾" scheme="http://chuiliu.github.io/tags/%E6%8A%98%E8%85%BE/"/>
    
      <category term="前端" scheme="http://chuiliu.github.io/categories/fe/"/>
    
      <category term="折腾" scheme="http://chuiliu.github.io/categories/fe/%E6%8A%98%E8%85%BE/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[移动 webapp 开发相关要点]]></title>
    <link href="http://chuiliu.github.io/2016/11/15/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    <id>http://chuiliu.github.io/2016/11/15/移动开发/</id>
    <published>2016-11-14T16:10:33.000Z</published>
    <updated>2016-12-08T08:45:59.595Z</updated>
    <content type="html"><![CDATA[<p>最近接触了移动端开发，将开发中遇到的一些相关知识点记下来。</p>
<h4 id="viewport_uFF0C_u9875_u9762_u6BD4_u4F8B_u521D_u59CB_u5316_uFF0C_u7981_u6B62_u9875_u9762_u7684_u7F29_u653E_u884C_u4E3A"><a href="#viewport_uFF0C_u9875_u9762_u6BD4_u4F8B_u521D_u59CB_u5316_uFF0C_u7981_u6B62_u9875_u9762_u7684_u7F29_u653E_u884C_u4E3A" class="headerlink" title="viewport，页面比例初始化，禁止页面的缩放行为"></a>viewport，页面比例初始化，禁止页面的缩放行为</h4><pre><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=no&quot; /&gt;
</code></pre><p>页面宽度为设备宽度，高度为设备高度，初始缩放1倍，最大缩放1倍，最小缩放1倍， 禁止用户缩放行为<br><code>user-scalable=no</code>也可以写成<code>user-scalable=0</code></p>
<hr>
<h4 id="u7981_u6B62iPhone_u6D4F_u89C8_u5668_u4E0B_u7535_u8BDD_u53F7_u7801_u53EF_u4EE5_u70B9_u51FB_u62E8_u53F7"><a href="#u7981_u6B62iPhone_u6D4F_u89C8_u5668_u4E0B_u7535_u8BDD_u53F7_u7801_u53EF_u4EE5_u70B9_u51FB_u62E8_u53F7" class="headerlink" title="禁止iPhone浏览器下电话号码可以点击拨号"></a>禁止iPhone浏览器下电话号码可以点击拨号</h4><a id="more"></a>
<pre><code>&lt;meta name = &quot;format-detection&quot; content = &quot;telephone=no&quot;&gt;
</code></pre><p>如果禁止点击后，有个别地方需要设置回原来的拨打电话，则可以这样写</p>
<pre><code>&lt;a href = &quot;tel:13800000000&quot;&gt;call 13800000000&lt;/a&gt;
</code></pre><p>或者用js:</p>
<pre><code>location.href = &#39;tell:10086&#39;
</code></pre><hr>
<h4 id="u5728_u79FB_u52A8_u7AEF_uFF0C_u89E6_u53D1_u70B9_u51FB_u4E8B_u4EF6_u65F6_uFF08_u8D85_u94FE_u63A5_u6216_u8005click_u4E8B_u4EF6_uFF09_u4F1A_u6709_u9AD8_u4EAE_u7684_u80CC_u666F_u6846_u6765_u8868_u793A_u70B9_u51FB_u7684_u54CD_u5E94_uFF0C_u53EF_u4EE5_u5C06_u5176_u900F_u660E_u6389_u4E0D_u663E_u793A_uFF1A"><a href="#u5728_u79FB_u52A8_u7AEF_uFF0C_u89E6_u53D1_u70B9_u51FB_u4E8B_u4EF6_u65F6_uFF08_u8D85_u94FE_u63A5_u6216_u8005click_u4E8B_u4EF6_uFF09_u4F1A_u6709_u9AD8_u4EAE_u7684_u80CC_u666F_u6846_u6765_u8868_u793A_u70B9_u51FB_u7684_u54CD_u5E94_uFF0C_u53EF_u4EE5_u5C06_u5176_u900F_u660E_u6389_u4E0D_u663E_u793A_uFF1A" class="headerlink" title="在移动端，触发点击事件时（超链接或者click事件）会有高亮的背景框来表示点击的响应，可以将其透明掉不显示："></a>在移动端，触发点击事件时（超链接或者click事件）会有高亮的背景框来表示点击的响应，可以将其透明掉不显示：</h4><pre><code class="css">-webkit-tap-highlight-color: rgba(0,0,0,0);
// 或者
-webkit-tap-highlight-color: transparent;
</code></pre>
<hr>
<h4 id="u9650_u5236_u7528_u6237_u53EA_u80FD_u8F93_u5165_u7EAF_u6587_u672C_uFF08_u6307_u4E0D_u5E26_u6709_u6837_u5F0F_uFF0C_u6BD4_u5982_u590D_u5236_u7C98_u8D34_u6765_u7684_u6587_u672C_u53EF_u80FD_u5B57_u4F53_u5B57_u53F7_u989C_u8272_u7B49_u6837_u5F0F_u4E0D_u4E00_u6837_uFF09"><a href="#u9650_u5236_u7528_u6237_u53EA_u80FD_u8F93_u5165_u7EAF_u6587_u672C_uFF08_u6307_u4E0D_u5E26_u6709_u6837_u5F0F_uFF0C_u6BD4_u5982_u590D_u5236_u7C98_u8D34_u6765_u7684_u6587_u672C_u53EF_u80FD_u5B57_u4F53_u5B57_u53F7_u989C_u8272_u7B49_u6837_u5F0F_u4E0D_u4E00_u6837_uFF09" class="headerlink" title="限制用户只能输入纯文本（指不带有样式，比如复制粘贴来的文本可能字体字号颜色等样式不一样）"></a>限制用户只能输入纯文本（指不带有样式，比如复制粘贴来的文本可能字体字号颜色等样式不一样）</h4><pre><code class="css">p {-webkit-user-modify: read-write-plaintext-only;}
</code></pre>
<p>使用<code>user-modify</code></p>
<pre><code>-webkit-user-modify: read-only | read-write | read-write-plaintext-only  /*只读|可读写|可读写，内容只能是纯文本*/
</code></pre><hr>
<h4 id="u7981_u6B62_u7528_u6237_u8FDB_u884C_u6587_u672C_u9009_u62E9"><a href="#u7981_u6B62_u7528_u6237_u8FDB_u884C_u6587_u672C_u9009_u62E9" class="headerlink" title="禁止用户进行文本选择"></a>禁止用户进行文本选择</h4><pre><code class="css">-webkit-user-select: none;
user-select: none;
</code></pre>
<hr>
<h4 id="u5236_u4F5C_u534A_u50CF_u7D20_u8FB9_u6846"><a href="#u5236_u4F5C_u534A_u50CF_u7D20_u8FB9_u6846" class="headerlink" title="制作半像素边框"></a>制作半像素边框</h4><p>移动端下使用<code>border: 1px solid #ccc;</code>不一定就能产生1像素的边框线，有些手机会显示成比1像素粗的边框，可以通过伪类来做边框，可以做成比1像素纤细的半像素的下边框：</p>
<pre><code class="css">.border-bottom {
    position: relative;

    &amp;:after {
        position: absolute;
        content: &quot;&quot;;
        display: block;
        left: 0;
        bottom: 0;
        width: 100%;
        height: 1px;
        background: #ccc;
        -webkit-transform: scaleY(0.5);
                transform: scaleY(0.5);
    }
}
</code></pre>
<hr>
<h4 id="u53D6_u6D88_u8F93_u5165_u6846_u3001_u6587_u672C_u6846_u9ED8_u8BA4_u805A_u7126_u6837_u5F0F"><a href="#u53D6_u6D88_u8F93_u5165_u6846_u3001_u6587_u672C_u6846_u9ED8_u8BA4_u805A_u7126_u6837_u5F0F" class="headerlink" title="取消输入框、文本框默认聚焦样式"></a>取消输入框、文本框默认聚焦样式</h4><pre><code>input:focus, textarea:focus {outline: none;}
</code></pre><hr>
<h4 id="u4F7F_u7528localStorage"><a href="#u4F7F_u7528localStorage" class="headerlink" title="使用localStorage"></a>使用localStorage</h4><pre><code>localStorage.setItem(&#39;title&#39;, &#39;hello&#39;);
var title = localStorage.getItem(&#39;title&#39;);
// 移除
localStorage.removeItem(&#39;title&#39;);
</code></pre><hr>
<h4 id="u7126_u70B9"><a href="#u7126_u70B9" class="headerlink" title="焦点"></a>焦点</h4><pre><code>// 获取当前焦点
var ele = document.activeElement;
// 滚到焦点处
document.activeElement.scrollIntoViewIfNeeded();
</code></pre><hr>
<h4 id="u4FEE_u6539_u9009_u4E2D_u6587_u672C_u7684_u6837_u5F0F"><a href="#u4FEE_u6539_u9009_u4E2D_u6587_u672C_u7684_u6837_u5F0F" class="headerlink" title="修改选中文本的样式"></a>修改选中文本的样式</h4><p>使用<code>:selection</code>选择器</p>
<pre><code class="css">:selection: {
    background-color: #fffaf4;
}
</code></pre>
<hr>
<h4 id="u89E6_u6478_u4E8B_u4EF6"><a href="#u89E6_u6478_u4E8B_u4EF6" class="headerlink" title="触摸事件"></a>触摸事件</h4><pre><code>var ele = document.querySelector(&#39;#tab&#39;);
ele.addEventListener(&#39;touchStart&#39;, function(e) {
    e.preventDefault();
    touch = e.touches[0];
    var x = touch.pageX;
    var y = touch.pageY;
});
</code></pre><hr>
<h4 id="u4F7F_u7528_u5A92_u4F53_u67E5_u8BE2_u6765_u5B9E_u73B0_u54CD_u5E94_u5F0F_u5E03_u5C40"><a href="#u4F7F_u7528_u5A92_u4F53_u67E5_u8BE2_u6765_u5B9E_u73B0_u54CD_u5E94_u5F0F_u5E03_u5C40" class="headerlink" title="使用媒体查询来实现响应式布局"></a>使用媒体查询来实现响应式布局</h4><p>下面代码表示小于等于980px的屏幕，如果符合查询条件，则在@media里面定义的样式会覆盖之前的样式，要写的好不容易，写的时候还需要特别注意css的优先级。</p>
<pre><code>@media screen and (max-width: 980px) {
    // css code
}
</code></pre><hr>
<h4 id="u5F39_u6027_u76D2_u5B50_u5E03_u5C40"><a href="#u5F39_u6027_u76D2_u5B50_u5E03_u5C40" class="headerlink" title="弹性盒子布局"></a>弹性盒子布局</h4><pre><code>display: -webkit-box;
display: box;
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<p>最近接触了移动端开发，将开发中遇到的一些相关知识点记下来。</p>
<h4 id="viewport_uFF0C_u9875_u9762_u6BD4_u4F8B_u521D_u59CB_u5316_uFF0C_u7981_u6B62_u9875_u9762_u7684_u7F29_u653E_u884C_u4E3A"><a href="#viewport_uFF0C_u9875_u9762_u6BD4_u4F8B_u521D_u59CB_u5316_uFF0C_u7981_u6B62_u9875_u9762_u7684_u7F29_u653E_u884C_u4E3A" class="headerlink" title="viewport，页面比例初始化，禁止页面的缩放行为"></a>viewport，页面比例初始化，禁止页面的缩放行为</h4><pre><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=no&quot; /&gt;
</code></pre><p>页面宽度为设备宽度，高度为设备高度，初始缩放1倍，最大缩放1倍，最小缩放1倍， 禁止用户缩放行为<br><code>user-scalable=no</code>也可以写成<code>user-scalable=0</code></p>
<hr>
<h4 id="u7981_u6B62iPhone_u6D4F_u89C8_u5668_u4E0B_u7535_u8BDD_u53F7_u7801_u53EF_u4EE5_u70B9_u51FB_u62E8_u53F7"><a href="#u7981_u6B62iPhone_u6D4F_u89C8_u5668_u4E0B_u7535_u8BDD_u53F7_u7801_u53EF_u4EE5_u70B9_u51FB_u62E8_u53F7" class="headerlink" title="禁止iPhone浏览器下电话号码可以点击拨号"></a>禁止iPhone浏览器下电话号码可以点击拨号</h4>]]>
    
    </summary>
    
      <category term="CSS" scheme="http://chuiliu.github.io/tags/CSS/"/>
    
      <category term="前端" scheme="http://chuiliu.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="移动端" scheme="http://chuiliu.github.io/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
      <category term="移动端" scheme="http://chuiliu.github.io/categories/mobile/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何快速搭建静态资源服务器]]></title>
    <link href="http://chuiliu.github.io/2016/10/19/%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://chuiliu.github.io/2016/10/19/如何快速搭建静态资源服务器/</id>
    <published>2016-10-19T13:29:30.000Z</published>
    <updated>2016-12-31T05:15:51.463Z</updated>
    <content type="html"><![CDATA[<p>前端开发中，经常遇到有些场景需要用到服务器环境，例如AngularJS中的路由，或者是模拟ajax获取数据等需求时，这个时候并不需要考虑到服务端逻辑，只是搭建简单的静态资源服务，因此解决方法有很多，下面介绍几种简单快捷的常用方式：</p>
<h2 id="u4F7F_u7528browser-sync"><a href="#u4F7F_u7528browser-sync" class="headerlink" title="使用browser-sync"></a>使用browser-sync</h2><p><a href="https://www.browsersync.io/" target="_blank" rel="external">browser-sync</a>，非常棒的工具，最吸引人的是它的监控和同步功能，体验非常好，可以不用一直f5刷新浏览器即可实时看到修改了的变化。只要在同个局域网，还可以在手机上也同步看到变化，不需要手动刷新，非常适合移动端调试，很推荐使用。<br>安装：</p>
<pre><code>npm install -g browser-sync
</code></pre><a id="more"></a>
<p>在项目根目录执行：</p>
<pre><code>browser-sync start --server --files &quot;css/*.css&quot;
# 也可以配置多项，或者通配符匹配任意目录
browser-sync start --server --files &quot;**/*.css, **/*.html&quot;
</code></pre><p><img src="http://o743aqnrb.bkt.clouddn.com/20161019/brower-sync.png" alt=""></p>
<p>使用gulp启动</p>
<pre><code>npm install gulp browser-sync --save-dev
</code></pre><pre><code class="javascript">var gulp = require(&#39;gulp&#39;);
var browserSync = require(&#39;browser-sync&#39;).create();

gulp.task(&#39;browser-sync&#39;, function() {

    browserSync.init({
        files: [&#39;index.html&#39;, &#39;css/*.css&#39;, &#39;js/*.js&#39;],
        server: {
            baseDir: &#39;.&#39;
        }
    });
});
</code></pre>
<h2 id="u4F7F_u7528Python"><a href="#u4F7F_u7528Python" class="headerlink" title="使用Python"></a>使用Python</h2><p>如果你安装了Python，那这个方法可能最简便了，只需要在该目录下执行命令:</p>
<pre><code>python -m SimpleHTTPServer
</code></pre><p>这样就启动了一个静态web服务器，此时项目的根目录为执行命令时所在目录，默认端口是8000，如果需要指定端口，则加上端口号启动：</p>
<pre><code>python -m SimpleHTTPServer 8080
</code></pre><p><img src="http://o743aqnrb.bkt.clouddn.com/20161019/python-http-server-1.png" alt=""></p>
<h2 id="u4F7F_u7528http-server"><a href="#u4F7F_u7528http-server" class="headerlink" title="使用http-server"></a>使用http-server</h2><p>如果你安装了node，那么<code>http-server</code>也是个不错的选择，只需要一行命令就可以快速启动。<br>安装：</p>
<pre><code>npm install -g http-server
</code></pre><p>在项目根目录执行：</p>
<pre><code>http-server -a 127.0.0.1 -p 8000
</code></pre><p><img src="http://o743aqnrb.bkt.clouddn.com/20161019/http-server.png" alt=""></p>
<h2 id="u4F7F_u7528static-server"><a href="#u4F7F_u7528static-server" class="headerlink" title="使用static-server"></a>使用static-server</h2><p><code>static-server</code>很类似<code>http-server</code>，也是基于node，安装和使用方法很相似：</p>
<pre><code>npm install -g static-server
</code></pre><p>使用时只需要在项目目录下指定该项目的入口文件即可：</p>
<pre><code>static-server -i index.html
</code></pre><p><img src="http://o743aqnrb.bkt.clouddn.com/20161019/static-server-1.png" alt=""></p>
<p>下面是一些常用的选项：</p>
<blockquote>
<p>-p, –port <n>             指定端口启动<br>-i, –index <filename>       指定默认项目入口文件<br>-d, –debug                  显示错误信息<br>-n, –not-found <filename>   指定404页面</filename></filename></n></p>
</blockquote>
<p>详见：<a href="https://www.npmjs.com/package/static-server" target="_blank" rel="external">https://www.npmjs.com/package/static-server</a></p>
<h2 id="u4F7F_u7528Ruby"><a href="#u4F7F_u7528Ruby" class="headerlink" title="使用Ruby"></a>使用Ruby</h2><p>如果你安装Ruby，Ruby也提供了一个很简便的方式：</p>
<pre><code>ruby -run -e httpd . -p 8888
</code></pre><p><img src="http://o743aqnrb.bkt.clouddn.com/20161019/ruby-http-server.png" alt=""></p>
<h2 id="u4F7F_u7528Nginx"><a href="#u4F7F_u7528Nginx" class="headerlink" title="使用Nginx"></a>使用Nginx</h2><p>几乎所有的web应用在最终部署到<code>Linux</code>上时都会用到<code>Nginx</code>做反向代理服务器，所以很有必要会用<code>Nginx</code>。<br><a href="http://nginx.org/en/download.html" target="_blank" rel="external">下载</a>，解压，运行nginx.exe，在浏览器输入<code>localhost</code>或<code>127.0.0.1</code>，如果出现<br><strong>Welcome to nginx!</strong><br>则说明<code>Nginx</code>已经成功安装。</p>
<p>下面是<code>Nginx</code>常用到的命令：</p>
<pre><code>nginx -s reload                // 重新加载nginx配置
nginx -s stop
</code></pre><p>如果你的需求只是实现静态资源服务，那么只需要如下简单配置即可：root代表项目的根目录，index代表默认的入口文件。</p>
<pre><code>server {
    listen       80;
    server_name  localhost;

    location / {
        root   E:\Work\Workspace;
        index  index.html index.htm;
    }

    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   html;
    }
}
</code></pre><p>这时候访问 <a href="http://localhost/index.html" target="_blank" rel="external">http://localhost/index.html</a> 就OK了。</p>
<h2 id="u4F7F_u7528json-server"><a href="#u4F7F_u7528json-server" class="headerlink" title="使用json-server"></a>使用json-server</h2><p>如果你的需求只是想模拟<code>ajax</code>从后台获取数据，因为通常一个项目中前端开发和后台几乎是同时进行的，开发初期往往需要前端自己构造假数据来渲染页面，谷歌浏览器不在服务端环境下调试js，则会被视为跨域，从而导致无法获取本地<code>json</code>数据，要不就使用火狐浏览器，较好的解决方法是快速搭建一个JSON服务器,这个时候<a href="https://github.com/typicode/json-server" target="_blank" rel="external">json-server</a>就是个不错的选择了。</p>
<p>安装：</p>
<pre><code>npm install -g json-server
</code></pre><p>在任意文件夹下创建一个<code>json</code>文件：如data.json:</p>
<pre><code class="json">{
  &quot;posts&quot;: [
    { &quot;id&quot;: 1, &quot;title&quot;: &quot;json-server&quot;, &quot;author&quot;: &quot;typicode&quot; }
  ],
  &quot;comments&quot;: [
    { &quot;id&quot;: 1, &quot;body&quot;: &quot;some comment&quot;, &quot;postId&quot;: 1 },
    { &quot;id&quot;: 2, &quot;body&quot;: &quot;some comment&quot;, &quot;postId&quot;: 1 }
  ],
  &quot;profile&quot;: { &quot;name&quot;: &quot;typicode&quot; }
}
</code></pre>
<p>在该目录下启动<code>json-server</code>来监听这个文件:</p>
<pre><code>json-server --watch data.json

# 或者指定端口启动启动
json-server --watch data.json --port 3004
</code></pre><p><img src="http://o743aqnrb.bkt.clouddn.com/20161019/json-server-1.png" alt=""></p>
<p>可以看到<code>json-server</code>默认创建了三个请求资源，分别对应了<code>data.json</code>中的<code>key</code>值，很方便，这个时候浏览器访问localhostL3000/db 就会看到当前<code>data.json</code>的数据了。<br><img src="http://o743aqnrb.bkt.clouddn.com/20161019/json-server-2.png" alt=""></p>
<p>访问<a href="http://localhost:3000/comments/1" target="_blank" rel="external">http://localhost:3000/comments/1</a> ，则可以获取到comments下id为1的json数据：<br><img src="http://o743aqnrb.bkt.clouddn.com/20161019/json-server-3.png" alt=""></p>
<p>很神奇是吧，有了数据之后，可以让<code>json-server</code>也作为静态资源的服务器，这样就没有跨域问题了。<br><code>json-server</code>默认的静态资源（HTML,CSS,JS等）是在与json数据文件同级目录下的public文件夹中，你只需要创建一个名为<code>public</code>的文件夹，把静态资源放到<code>public</code>目录下，然后直接运行以下命令启动即可：</p>
<pre><code>json-server data.json
</code></pre><p>假如我们需要指定静态资源文件夹的位置，则可以通过指定目录来启动<code>json-server</code>即可，如指定静态资源为json数据同级目录的source文件夹下，则：</p>
<pre><code>json-server data.json --static ./source
</code></pre><p>这样，访问<a href="http://localhost:3000/index.html" target="_blank" rel="external">http://localhost:3000/index.html</a> 就可以成功加载到json数据了。<br><img src="http://o743aqnrb.bkt.clouddn.com/20161019/json-server-4.png" alt=""></p>
<p><code>json-server</code>还有很多更强大的功能，如支持模拟REST API操作等，更多的功能可以到<a href="https://github.com/typicode/json-server/blob/master/README.md" target="_blank" rel="external">json-server项目文档</a>查看。</p>
<h2 id="u4F7F_u7528_u4E00_u4E9BIDE"><a href="#u4F7F_u7528_u4E00_u4E9BIDE" class="headerlink" title="使用一些IDE"></a>使用一些IDE</h2><p>例如：HBuilder</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>前端开发中，经常遇到有些场景需要用到服务器环境，例如AngularJS中的路由，或者是模拟ajax获取数据等需求时，这个时候并不需要考虑到服务端逻辑，只是搭建简单的静态资源服务，因此解决方法有很多，下面介绍几种简单快捷的常用方式：</p>
<h2 id="u4F7F_u7528browser-sync"><a href="#u4F7F_u7528browser-sync" class="headerlink" title="使用browser-sync"></a>使用browser-sync</h2><p><a href="https://www.browsersync.io/">browser-sync</a>，非常棒的工具，最吸引人的是它的监控和同步功能，体验非常好，可以不用一直f5刷新浏览器即可实时看到修改了的变化。只要在同个局域网，还可以在手机上也同步看到变化，不需要手动刷新，非常适合移动端调试，很推荐使用。<br>安装：</p>
<pre><code>npm install -g browser-sync
</code></pre>]]>
    
    </summary>
    
      <category term="前端" scheme="http://chuiliu.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="开发工具" scheme="http://chuiliu.github.io/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
      <category term="前端" scheme="http://chuiliu.github.io/categories/fe/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[来些CSS技巧]]></title>
    <link href="http://chuiliu.github.io/2016/10/13/%E6%9D%A5%E4%BA%9BCSS%E6%8A%80%E5%B7%A7/"/>
    <id>http://chuiliu.github.io/2016/10/13/来些CSS技巧/</id>
    <published>2016-10-12T16:19:47.000Z</published>
    <updated>2016-12-11T06:49:11.607Z</updated>
    <content type="html"><![CDATA[<p>积少成多的感觉。</p>
<ol>
<li><p>一个很常见的问题，列表横向排列的时候，我们需要给每个列表设置右边距，通常最后一个是不必要设置的，如果网站需要兼容到IE8等不支持<code>:last-child</code>之类的选择器时，其实可以这样解决：<code>ul</code>列表可以设置宽度长一点，然后给<code>ul</code>的父元素设置<code>overflow:hidden</code>，这样每个<code>li</code>设置<code>margin：right</code>超出也无所谓，就不要再给最后一个<code>li</code>设置右边距为<code>0</code><br><img height="250" style="margin-left: -30px;" src="http://o743aqnrb.bkt.clouddn.com/css%E6%8A%80%E5%B7%A7css%E6%8A%80%E5%B7%A7-1.png"></p>
</li>
<li><p>用<code>box-shadow</code>画边框<br>边框毫无疑问用<code>border</code>来实现就行，如果需要再加一层呢？对的，用<code>box-shadow</code>，<code>box-shadow</code>第四个参数可以让阴影的半径增大或减小，可以将前三个参数设为0，就不会呈现出阴影效果而是边框效果<br></p><p data-height="265" data-theme-id="light" data-slug-hash="GNBLWo" data-default-tab="css,result" data-user="lonica" data-embed-version="2" data-pen-title="GNBLWo" class="codepen">See the Pen <a href="https://codepen.io/lonica/pen/GNBLWo/" target="_blank" rel="external">GNBLWo</a> by lonica (<a href="http://codepen.io/lonica" target="_blank" rel="external">@lonica</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><br><script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script><br>不过需要注意的是，<code>box-shadow</code>第四个参数长度是从边框外开始计算的，如果是两层<code>box-shadow</code>的话，第二层的值必须大于第一层才能看的到。并且，它不是边框，只是个看起来像边框的阴影。所以相邻的元素会被<code>box-shadow</code>部分遮挡住。<a id="more"></a><p></p>
</li>
<li><p>一个兼容多移动端的尺寸设置问题，可以在不同的媒体查询条件下针对不同尺寸的屏幕给根元素<code>&lt;html&gt;</code>设置不同的<code>font-size</code>值，然后长度单位就都用<code>rem</code>就好解决了。</p>
</li>
<li><p>用<code>rem</code>来取代<code>em</code>，<code>em</code>是相对父元素的字体来计算的，<code>1em = 父元素的font-size</code>，因为字体会变，<code>em</code>不利于整体性，容易混乱。<code>rem</code>是相对于 root element，即根元素<code>&lt;html&gt;</code>的<code>font-size</code>大小来计算的，使用<code>rem</code>单位可以保持整体一致。<br>因为浏览器默认<code>1rem = 16px</code>，为了方便计算，通常会把根元素的字体设置为62.5%，这样根元素的字体就是<code>10px</code>，即<code>1rem = 10px</code>，所以<code>16px = 1.6rem</code>，直观很多</p>
<pre><code class="css">html {
 font-size: 62.5%;
}
</code></pre>
</li>
<li><p>有时候想在伪元素上出现指定的文字怎么办，办法总是有的，伪元素的<code>content</code>内容可以来自元素的属性，使用<code>attr()</code>来获取到</p>
<pre><code class="html">&lt;div id=&quot;box&quot; data-title=&quot;hello&quot;&gt;hello&lt;/div&gt;
&lt;a href=&quot;https://www.google.com/&quot;&gt;google&lt;/a&gt;
</code></pre>
<pre><code>// 将data-title的内容作为content
#box::after {
 content: attr(data-title);
}
// 将href的内容作为content
a::after {
 content: attr(href);
}
</code></pre></li>
<li><p>大图片自适应小屏幕，使用<code>min-width</code>来解决</p>
<pre><code>img {
 min-width: 100%;
}
</code></pre><p>需要兼容IE6的话，IE6下使用 <code>img {width: 100%}</code></p>
</li>
<li><p>文本溢出用省略号显示</p>
<pre><code class="css">p {
 text-overflow: ellipsis; 
 overflow: hidden; 
 white-space: nowrap; 
}
</code></pre>
</li>
<li><p>阻止鼠标点击事件，阻止hover和active状态的变化触发的事件，ie11+可支持</p>
<pre><code class="css">div {
 pointer-events：none;
}
</code></pre>
</li>
<li><p>实现背景半透明，文字不透明<br><code>opacity</code>会使得所有元素变透明，包括文字，如果需要实现文字不透明，可以在文字部分使用定位，定位到背景上面。</p>
</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>积少成多的感觉。</p>
<ol>
<li><p>一个很常见的问题，列表横向排列的时候，我们需要给每个列表设置右边距，通常最后一个是不必要设置的，如果网站需要兼容到IE8等不支持<code>:last-child</code>之类的选择器时，其实可以这样解决：<code>ul</code>列表可以设置宽度长一点，然后给<code>ul</code>的父元素设置<code>overflow:hidden</code>，这样每个<code>li</code>设置<code>margin：right</code>超出也无所谓，就不要再给最后一个<code>li</code>设置右边距为<code>0</code><br><img height="250" style="margin-left: -30px;" src="http://o743aqnrb.bkt.clouddn.com/css%E6%8A%80%E5%B7%A7css%E6%8A%80%E5%B7%A7-1.png"></p>
</li>
<li><p>用<code>box-shadow</code>画边框<br>边框毫无疑问用<code>border</code>来实现就行，如果需要再加一层呢？对的，用<code>box-shadow</code>，<code>box-shadow</code>第四个参数可以让阴影的半径增大或减小，可以将前三个参数设为0，就不会呈现出阴影效果而是边框效果<br><p data-height="265" data-theme-id="light" data-slug-hash="GNBLWo" data-default-tab="css,result" data-user="lonica" data-embed-version="2" data-pen-title="GNBLWo" class="codepen">See the Pen <a href="https://codepen.io/lonica/pen/GNBLWo/">GNBLWo</a> by lonica (<a href="http://codepen.io/lonica">@lonica</a>) on <a href="http://codepen.io">CodePen</a>.</p><br><script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script><br>不过需要注意的是，<code>box-shadow</code>第四个参数长度是从边框外开始计算的，如果是两层<code>box-shadow</code>的话，第二层的值必须大于第一层才能看的到。并且，它不是边框，只是个看起来像边框的阴影。所以相邻的元素会被<code>box-shadow</code>部分遮挡住。]]>
    
    </summary>
    
      <category term="CSS" scheme="http://chuiliu.github.io/tags/CSS/"/>
    
      <category term="前端" scheme="http://chuiliu.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="技巧" scheme="http://chuiliu.github.io/tags/%E6%8A%80%E5%B7%A7/"/>
    
      <category term="前端" scheme="http://chuiliu.github.io/categories/fe/"/>
    
      <category term="CSS" scheme="http://chuiliu.github.io/categories/fe/CSS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[解决MySQL因max_allowed_packet的值设置过小而查询失败的问题]]></title>
    <link href="http://chuiliu.github.io/2016/10/11/%E8%A7%A3%E5%86%B3MySQL%E5%9B%A0max-allowed-packet%E7%9A%84%E5%80%BC%E8%AE%BE%E7%BD%AE%E8%BF%87%E5%B0%8F%E8%80%8C%E6%9F%A5%E8%AF%A2%E5%A4%B1%E8%B4%A5%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://chuiliu.github.io/2016/10/11/解决MySQL因max-allowed-packet的值设置过小而查询失败的问题/</id>
    <published>2016-10-11T14:22:02.000Z</published>
    <updated>2016-12-07T06:26:59.527Z</updated>
    <content type="html"><![CDATA[<p>在MySQL中，Client和Server通信时可接收数据包的大小是受限制的，这个限制值为<code>max_allowed_packet</code>，通信的最小单位就是packet，当Server接收的数据包大小超过了MySQL配置文件中<code>max_allowed_packet</code>的限制值时，对数据库的读写操作则会失败。</p>
<p>那么如何修改这个值的大小。首先，我们可以通过这个命令先查看当前<code>max_allowed_packet</code>值的大小：</p>
<pre><code>SHOW VARIABLES LIKE &#39;%max_allowed_packet%&#39;;
</code></pre><a id="more"></a>
<h3 id="u65B9_u6CD5_u4E00_uFF1A_u4F7F_u7528_u547D_u4EE4_u4FEE_u6539"><a href="#u65B9_u6CD5_u4E00_uFF1A_u4F7F_u7528_u547D_u4EE4_u4FEE_u6539" class="headerlink" title="方法一：使用命令修改"></a>方法一：使用命令修改</h3><p>可以通过命令修改<code>max_allowed_packet</code>的值，然后通过重启MySQL服务来使命令生效，具体方法如下：<br>修改值大小</p>
<pre><code class="sql">set global max_allowed_packet = 1024*1024*10
</code></pre>
<p>重启数据库</p>
<pre><code>service mysql restart
</code></pre><h3 id="u65B9_u6CD5_u4E8C_uFF1A_u4FEE_u6539_u914D_u7F6E_u6587_u4EF6"><a href="#u65B9_u6CD5_u4E8C_uFF1A_u4FEE_u6539_u914D_u7F6E_u6587_u4EF6" class="headerlink" title="方法二：修改配置文件"></a>方法二：修改配置文件</h3><p>通过修改MySQL的配置文件也可以修改该值：<br>查找配置文件的路径</p>
<pre><code>mysql --help | grep my.cnf
</code></pre><p>找到配置文件后切换到该路径用vim打开，找到并直接修改其值即可：</p>
<pre><code>max_allowed_packet = 10M
</code></pre><p><strong>PS：</strong>前段时间经常遇到<code>max_allowed_packet</code>的值隔好几天就又被重置为1M的情况，查找了很久没有找具体的原因，谷歌和百度了不少都说是遭到黑客攻击之类的，因此按大家推荐的方法把数据库的用户和密码都做修改，修改过后这段时间也没再出现过这个问题，建议大家不要使用太简单的密码。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在MySQL中，Client和Server通信时可接收数据包的大小是受限制的，这个限制值为<code>max_allowed_packet</code>，通信的最小单位就是packet，当Server接收的数据包大小超过了MySQL配置文件中<code>max_allowed_packet</code>的限制值时，对数据库的读写操作则会失败。</p>
<p>那么如何修改这个值的大小。首先，我们可以通过这个命令先查看当前<code>max_allowed_packet</code>值的大小：</p>
<pre><code>SHOW VARIABLES LIKE &#39;%max_allowed_packet%&#39;;
</code></pre>]]>
    
    </summary>
    
      <category term="MySQL" scheme="http://chuiliu.github.io/tags/MySQL/"/>
    
      <category term="MySQL" scheme="http://chuiliu.github.io/categories/MySQL/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[解决HTTPS方式下GIT推送到远程分支每次都要重新输入用户名密码]]></title>
    <link href="http://chuiliu.github.io/2016/10/11/%E8%A7%A3%E5%86%B3GIT%E6%8E%A8%E9%80%81%E5%88%B0%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF%E6%AF%8F%E6%AC%A1%E9%83%BD%E8%A6%81%E9%87%8D%E6%96%B0%E8%BE%93%E5%85%A5%E7%94%A8%E6%88%B7%E5%90%8D%E5%AF%86%E7%A0%81/"/>
    <id>http://chuiliu.github.io/2016/10/11/解决GIT推送到远程分支每次都要重新输入用户名密码/</id>
    <published>2016-10-11T14:09:34.000Z</published>
    <updated>2016-12-07T06:02:52.004Z</updated>
    <content type="html"><![CDATA[<p>最近因换了硬盘，重新克隆Git项目到本地，因为使用的是HTTPS方式克隆的，在每次推送代码到Coding上时发现都要输入username和password，除非改成SSH方式，不然很不方便。</p>
<p>经过一番尝试，找到了解决方法：</p>
<ol>
<li>在克隆项目时加上用户名和密码信息，这样以后这个项目的推送就不需要再输用户名密码：<pre><code>git clone https://username:password@git.coding.net/username/Demo.git
</code></pre></li>
</ol>
<a id="more"></a>
<p>如果当前项目已经存在，不想再重新克隆，则可以先删除本来的主机名再重新配置远程仓库即可：</p>
<pre><code>git remote rm origin
git remote add origin https://username:password@git.coding.net/username/Demo.git
</code></pre><p>这种方式虽然挺好，但是只是解决了当前项目的推送问题，并没有全局生效，如果是另外克隆的其它项目，则也需要在克隆时带上用户名和密码才会生效。另外需要注意的是，这样做会导致在<code>./.git/config</code>文件中可以直接看到明文密码，个人认为不太安全，因此还是建议大家使用配置SSH公钥的方式，即方便、好管理又安全。</p>
<pre><code>[remote &quot;origin&quot;]
    url = https://username:password@git.coding.net/username/Demo.git
    fetch = +refs/heads/*:refs/remotes/origin/*
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<p>最近因换了硬盘，重新克隆Git项目到本地，因为使用的是HTTPS方式克隆的，在每次推送代码到Coding上时发现都要输入username和password，除非改成SSH方式，不然很不方便。</p>
<p>经过一番尝试，找到了解决方法：</p>
<ol>
<li>在克隆项目时加上用户名和密码信息，这样以后这个项目的推送就不需要再输用户名密码：<pre><code>git clone https://username:password@git.coding.net/username/Demo.git
</code></pre></li>
</ol>]]>
    
    </summary>
    
      <category term="Git" scheme="http://chuiliu.github.io/tags/Git/"/>
    
      <category term="工具" scheme="http://chuiliu.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[AngularJS 什么时候用$apply]]></title>
    <link href="http://chuiliu.github.io/2016/10/08/AngularJS%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E7%94%A8-apply/"/>
    <id>http://chuiliu.github.io/2016/10/08/AngularJS什么时候用-apply/</id>
    <published>2016-10-08T13:29:20.000Z</published>
    <updated>2016-12-07T06:03:23.283Z</updated>
    <content type="html"><![CDATA[<p>写AngularJS代码时会时常发现，有时候明明数据模型更新了但是页面视图层并没有更新，然后只要在代码里加上一句<code>$scope.$apply()</code>，视图就更新了。以前总是不清楚什么时候该用，现在清晰了，记录一下。</p>
<p>其实总结一句就是：<strong>DOM监听事件处理程序中的代码，外部的回调函数（例如<code>setTimeout()</code>,<code>setInterval()</code>）中的代码等不在Angular执行上下文中的代码，如果有修改到Angular数据模型时，则必须由我们手动调用<code>$apply()</code>来获得视图层的更新。<code>$apply</code>方法将会调用一个digest循环来更新整个视图层。</strong></p>
<a id="more"></a>
<p><strong><code>$apply()</code>必须在该调用的时候调用</strong>，在我们使用AngularJS的提供的指令或服务，如<code>ng-click</code>、<code>$timeout</code>等来处理数据模型时，Angluar会自动调用<code>$scope.$apply()</code>，如果再手动调用是会报错的。</p>
<p>例如，假设我们不使用Angular提供的<code>$timeout</code>服务，而使用原生的<code>setTimeout()</code>，则这个时候必须用<code>$apply()</code>才能使得数据更新。</p>
<p><strong>比较好的写法是将涉及数据模型改变的代码写在<code>$scope.$apply()</code>里面</strong>，而不是执行完代码后再调用一次<code>$scope.$apply()</code>。传递给<code>$scope.$apply()</code>执行，Angular才会对这段代码做异常处理。</p>
<pre><code>angular.module(&#39;myModule&#39;, []).controller(&#39;MyController&#39;, function($scope) {
    $scope.updateTime = function() {
        setTimeout(function() {
            $scope.$apply(function() {
                $scope.timestamp = new Date().getTime();
            });
        }, 1000);
    };
});
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<p>写AngularJS代码时会时常发现，有时候明明数据模型更新了但是页面视图层并没有更新，然后只要在代码里加上一句<code>$scope.$apply()</code>，视图就更新了。以前总是不清楚什么时候该用，现在清晰了，记录一下。</p>
<p>其实总结一句就是：<strong>DOM监听事件处理程序中的代码，外部的回调函数（例如<code>setTimeout()</code>,<code>setInterval()</code>）中的代码等不在Angular执行上下文中的代码，如果有修改到Angular数据模型时，则必须由我们手动调用<code>$apply()</code>来获得视图层的更新。<code>$apply</code>方法将会调用一个digest循环来更新整个视图层。</strong></p>]]>
    
    </summary>
    
      <category term="AngularJS" scheme="http://chuiliu.github.io/tags/AngularJS/"/>
    
      <category term="Javascript" scheme="http://chuiliu.github.io/tags/Javascript/"/>
    
      <category term="前端" scheme="http://chuiliu.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="前端" scheme="http://chuiliu.github.io/categories/fe/"/>
    
      <category term="AngularJS" scheme="http://chuiliu.github.io/categories/fe/AngularJS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[理解浏览器同源策略与跨域的解决方案]]></title>
    <link href="http://chuiliu.github.io/2016/09/28/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5/"/>
    <id>http://chuiliu.github.io/2016/09/28/浏览器同源策略/</id>
    <published>2016-09-28T01:38:08.000Z</published>
    <updated>2016-12-07T06:06:15.841Z</updated>
    <content type="html"><![CDATA[<p>开发中涉及到一些跨域问题，从而对同源策略有更深的理解，同源策略是保证Web浏览器安全中最基本的安全功能，无论是前端还是后端，如果对同源策略不了解很容易导致一些开发上的难题。</p>
<h2 id="u540C_u6E90_u7B56_u7565"><a href="#u540C_u6E90_u7B56_u7565" class="headerlink" title="同源策略"></a>同源策略</h2><p>对Javascript来说，满足同源策略可以简单理解为下面的三项必须完全相同：</p>
<a id="more"></a>
<ul>
<li>协议相同</li>
<li>域名相同</li>
<li>端口相同</li>
</ul>
<p>也就是说，只要两个URL中的协议、域名或端口存在任何一项不同，则被浏览器视为是不同源的。<br>举个例子，下列与<code>http://test.example.com/page1/index.html</code>的同源情况</p>
<blockquote>
<p><a href="http://test.example.com/page2/index.html" target="_blank" rel="external">http://test.example.com/page2/index.html</a>  # 同源<br><a href="https://test.example.com/page1/index.html" target="_blank" rel="external">https://test.example.com/page1/index.html</a>  # 不同源，协议不同<br><a href="http://demo.example.com/page1/index.html" target="_blank" rel="external">http://demo.example.com/page1/index.html</a>  # 不同源，域名不同<br><a href="http://test.example.com:3000/page1/index.html" target="_blank" rel="external">http://test.example.com:3000/page1/index.html</a>  # 不同源，端口不同</p>
</blockquote>
<p>注意：<code>http://127.0.0.1:8080/index.html</code> 和 <code>http://localhost:8080/index.html</code> 当然也是不同源的</p>
<p>HTML中的<code>&lt;link&gt;</code>，<code>&lt;img&gt;</code>，<code>&lt;script&gt;</code>，<code>&lt;iframe&gt;</code>等标签都可以跨域加载资源，它们实际上是发送了一次GET请求，而在Javascript中，浏览器不允许脚本行为的跨域，也就是由<code>XMLHttpRequest</code>发起HTTP的请求会受到同源策略的限制。所以当需要由<code>AJAX</code>跨域加载资源时，就会涉及到跨域的处理。</p>
<p>跨域的处理通常有以下两种常用的解决方案。</p>
<h2 id="CORS_u8DE8_u57DF"><a href="#CORS_u8DE8_u57DF" class="headerlink" title="CORS跨域"></a>CORS跨域</h2><p><code>CORS</code>跨域需要后端的解决，其主要原理是由服务端来授权控制谁可以跨域获取资源，这是一种比较安全的解决方案。</p>
<h4 id="Access-Control-Allow-Origin"><a href="#Access-Control-Allow-Origin" class="headerlink" title="Access-Control-Allow-Origin"></a>Access-Control-Allow-Origin</h4><p>服务端返回的响应头应该在<code>Access-Control-Allow-Origin</code>中设置允许接受请求的域，例如这样设置</p>
<pre><code>// 表示允许来自所有站点的跨域请求
Access-Control-Allow-Origin: *

// 表示仅允许来自http://localhost:8000的跨域请求
Access-Control-Allow-Origin: http://localhost:8000
</code></pre><p><img src="http://o743aqnrb.bkt.clouddn.com/20160928/%E8%B7%A8%E5%9F%9F1.png" alt=""></p>
<h4 id="OPTIONS_u9884_u8BF7_u6C42"><a href="#OPTIONS_u9884_u8BF7_u6C42" class="headerlink" title="OPTIONS预请求"></a>OPTIONS预请求</h4><p>当一个HTTP请求不是一个简单请求时，浏览器有一个预请求的过程，也就是发送一个<code>OPTIONS</code>请求，浏览器会预先发送一个<code>OPTIOMS</code>请求给目的站点，去探测目的站点是否允许来自这个源的站点跨域，这个过程是浏览器自行判断并发起的，不需要我们来写，除了GET请求、HEAD请求、没有传参的POST请求和以表单提交方式发出的POST请求外，其它的任何HTTP请求都会发出预请求去探测是否可以继续。</p>
<p><img src="http://o743aqnrb.bkt.clouddn.com/20160928/%E8%B7%A8%E5%9F%9F4.png" alt="OPTION请求"><br><img src="http://o743aqnrb.bkt.clouddn.com/20160928/%E8%B7%A8%E5%9F%9F5.png" alt="POST请求"></p>
<h4 id="Access-Control-Allow-Credentials"><a href="#Access-Control-Allow-Credentials" class="headerlink" title="Access-Control-Allow-Credentials"></a>Access-Control-Allow-Credentials</h4><p>如果是跨域并携带<code>cookie</code>的通信则要注意了，当<code>XMLHttpRequest</code>对象实例中<code>withCredentials</code>属性为<code>true</code>的情况下，服务端还必须设置<code>Access-Control-Allow-Credentials:true</code>来确定是否接受<code>cookie</code>，如果没有设置这个值，尽管客户端发送了<code>cookie</code>值过来，服务端也会忽略，并且请求失败。</p>
<p>需要特别注意的是，如果此时响应头中<code>Access-Control-Allow-Origin</code>的值是<code>*</code>，此时请求还是会失败的，因为在带有<code>cookie</code>的HTTP请求中，<code>Access-Control-Allow-Origin</code>的值不能用<code>*</code>号通配符，只能设置具体的域名。否则Chrome会报如下错误：</p>
<p><img src="http://o743aqnrb.bkt.clouddn.com/20160928/%E8%B7%A8%E5%9F%9F2.png" alt=""></p>
<p>因此只有对于一个不带有<code>credentials</code>的跨域请求，<code>Access-Control-Allow-Origin</code>才可以指定为<code>*</code>，表示允许来自所有域的请求。</p>
<h4 id="Access-Control-Max-Age"><a href="#Access-Control-Max-Age" class="headerlink" title="Access-Control-Max-Age"></a>Access-Control-Max-Age</h4><p>响应头还可以设置<code>Access-Control-Max-Age</code>来告诉客户端这一次预请求的有效期，在有效期内再次跨域访问，浏览器不会预先发送预请求直到时间失效</p>
<pre><code>Access-Control-Max-Age: 864000  # 单位是秒，表示10天内，浏览器对于该域的跨域请求，不需要再发送预请求
</code></pre><h4 id="Access-Control-Allow-Headers"><a href="#Access-Control-Allow-Headers" class="headerlink" title="Access-Control-Allow-Headers"></a>Access-Control-Allow-Headers</h4><p>在会发出预请求的情况下必须配置，指明可以自定义的请求头</p>
<pre><code>Access-Control-Allow-Headers: Content-Type
</code></pre><p>如果POST请求需要传<code>JSON</code>格式的参数，前端设置了<code>&#39;Content-Type&#39;, &#39;application/json&#39;</code>，则服务端必须设置<code>Access-Control-Allow-Headers</code>，否则也不成功，Chrome会报下面的错：</p>
<p><img src="http://o743aqnrb.bkt.clouddn.com/20160928/%E8%B7%A8%E5%9F%9F3.png" alt=""></p>
<h4 id="Access-Control-Allow-Methods"><a href="#Access-Control-Allow-Methods" class="headerlink" title="Access-Control-Allow-Methods"></a>Access-Control-Allow-Methods</h4><p>表示允许的请求方式，可以配置多个值</p>
<pre><code>Access-Control-Allow-Methods: POST, GET, OPTION, PUT, DELETE
</code></pre><p><code>CORS</code>方式可以灵活可控地解决跨域问题，并且支持所有类型的HTTP请求，但是它存在一定的局限性，这种方式的兼容性差，只支持IE9+，不过很适合用于移动端。</p>
<ul>
<li>前端代码：</li>
</ul>
<pre><code class="javascript">var xhr = new XMLHttpRequest();
var postData = {
    name: &#39;lonica&#39;,
    email: &#39;test@126.com&#39;
};
xhr.open(&#39;POST&#39;, &#39;http://127.0.0.1:3001/&#39;, true);
xhr.setRequestHeader(&#39;Content-Type&#39;, &#39;application/json&#39;);
xhr.withCredentials = true;
xhr.onreadystatechange = function() {
    if (xhr.readyState == 4 &amp;&amp; xhr.status == 200) {
        console.log(JSON.parse(xhr.responseText));
    }
};
xhr.send(JSON.stringify(postData));
</code></pre>
<ul>
<li>服务端代码：</li>
</ul>
<pre><code>var http = require(&#39;http&#39;);

http.createServer(function(req, res) {
    var data = {
        name: &#39;lonica&#39;
    };
    res.writeHead(200, {
        &#39;Content-Type&#39; : &#39;text/plain&#39;,
        &#39;Access-Control-Allow-Origin&#39; : &#39;http://localhost:8000&#39;,
        &#39;Access-Control-Allow-Methods&#39; : &#39;GET, POST, OPTIONS, PUT, DELETE, HEAD&#39;,
        &#39;Access-Control-Allow-Credentials&#39; : true,
        &#39;Access-Control-Allow-Headers&#39; : &#39;Content-Type&#39;,
        &#39;Access-Control-Max-Age&#39; : &#39;3600&#39;
    });
    res.end(JSON.stringify(data));
}).listen(3001);
</code></pre><h2 id="JSONP_u8DE8_u57DF"><a href="#JSONP_u8DE8_u57DF" class="headerlink" title="JSONP跨域"></a>JSONP跨域</h2><p><code>JSONP</code>是<code>JSON with Padding</code>的简称，这种方式的兼容性好，但是只能处理GET请求的跨域，使用的时候需要特别注意。</p>
<p>我们都知道，浏览器不允许使用<code>XMLHttpRequest</code>脚本去获取不同域的数据，但是可以通过<code>&lt;script&gt;</code>，<code>&lt;link&gt;</code>，<code>&lt;img&gt;</code>等标签来发起GET请求来获取数据，<code>JSONP</code>就是利用了这个原理，所以也不难理解<code>JSONP</code>为什么只能支持GET请求了。</p>
<p><code>JSONP</code>的原理：利用<code>&lt;script&gt;</code>标签去获取一段<code>javascript</code>代码，这段<code>javascript</code>代码的内容（由服务端拼接）包含了一个方法的调用，调用方法时所传入的参数就是前端要拿到的数据，前端只需要在这个方法的实现里面处理传入的数据即可，<code>JSONP</code>需要前后端一起配合，确定方法名由前端传参给后端，并由后端拼接成调用方法的语句再返回给前端。</p>
<ul>
<li>前端代码</li>
</ul>
<pre><code class="html">&lt;script type=&quot;text/javascript&quot;&gt;
    function callback(data) {
        // 获取到的数据
        console.log(data);
    }

    var ele = document.createElement(&#39;script&#39;);
    ele.type = &#39;text/javascript&#39;;
    ele.src = &#39;http://127.0.0.1:3000?callback=callback&#39;;
    document.body.appendChild(ele);

&lt;/script&gt;
</code></pre>
<ul>
<li>后端代码实现：</li>
</ul>
<pre><code class="javascript">var http = require(&#39;http&#39;);
var url = require(&#39;url&#39;);

http.createServer(function(req, res) {
    var params = url.parse(req.url, true).query;
    var func = params.callback;
    var data = {
        tags: [&#39;jsonp&#39;, &#39;javascript&#39;]
    };
    res.writeHead(200, {&#39;Content-Type&#39; : &#39;text/plain&#39;});
    res.end(func + &#39;(&#39; + JSON.stringify(data) +&#39;)&#39;);
}).listen(3000);
</code></pre>
]]></content>
    <summary type="html">
    <![CDATA[<p>开发中涉及到一些跨域问题，从而对同源策略有更深的理解，同源策略是保证Web浏览器安全中最基本的安全功能，无论是前端还是后端，如果对同源策略不了解很容易导致一些开发上的难题。</p>
<h2 id="u540C_u6E90_u7B56_u7565"><a href="#u540C_u6E90_u7B56_u7565" class="headerlink" title="同源策略"></a>同源策略</h2><p>对Javascript来说，满足同源策略可以简单理解为下面的三项必须完全相同：</p>]]>
    
    </summary>
    
      <category term="前端" scheme="http://chuiliu.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="跨域" scheme="http://chuiliu.github.io/tags/%E8%B7%A8%E5%9F%9F/"/>
    
      <category term="前端" scheme="http://chuiliu.github.io/categories/fe/"/>
    
      <category term="Javascript" scheme="http://chuiliu.github.io/categories/fe/Javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Redis 使用笔记（二）]]></title>
    <link href="http://chuiliu.github.io/2016/09/27/redis%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B02/"/>
    <id>http://chuiliu.github.io/2016/09/27/redis使用笔记2/</id>
    <published>2016-09-27T14:26:56.000Z</published>
    <updated>2016-12-07T06:10:44.718Z</updated>
    <content type="html"><![CDATA[<p>Redis可以支持存储不同格式的数据，Redis是一个数据结构服务器，它不是简单的key-value存储，以下是可以作为存储的类型：</p>
<ul>
<li>二进制安全的字符串</li>
<li>列表（Lists），按顺序插入的字符串元素的集合</li>
<li>集合（Sets），是不重复的并且无序的</li>
</ul>
<a id="more"></a>
<ul>
<li>有序集合（Sorted sets），每个字符串元素都关联到一个叫score浮动数值（floating number value）。里面的元素总是通过score进行排序</li>
<li>哈希（Hashes），由字段（field）及其关联的值（value）组成的映射</li>
<li>Bit arrays</li>
<li>HyperLogLogs</li>
</ul>
<p>可以使用<code>redis-cli</code>命令启动客户端，连接到redis服务器，来实践一下redis的使用：</p>
<h2 id="u5B57_u7B26_u4E32_uFF08Strings_uFF09"><a href="#u5B57_u7B26_u4E32_uFF08Strings_uFF09" class="headerlink" title="字符串（Strings）"></a>字符串（Strings）</h2><p>在一条命令中同时查询或赋值多个键</p>
<ul>
<li>mset 返回数组</li>
<li>mget </li>
</ul>
<pre><code>mset a 1 b 2 c 3
mget a b c
</code></pre><p>判断键是否存在</p>
<ul>
<li>exists 存在返回0，不存在返回1</li>
</ul>
<pre><code>exists a
</code></pre><p>删除键</p>
<ul>
<li>del 存在则返回1，不存在返回0</li>
</ul>
<p>返回某个键的类型</p>
<ul>
<li>type 不存在则返回none</li>
</ul>
<pre><code>type testList
</code></pre><h2 id="u8BBE_u7F6E_u548C_u67E5_u8BE2_u8FC7_u671F_u65F6_u95F4_uFF08expires_uFF09"><a href="#u8BBE_u7F6E_u548C_u67E5_u8BE2_u8FC7_u671F_u65F6_u95F4_uFF08expires_uFF09" class="headerlink" title="设置和查询过期时间（expires）"></a>设置和查询过期时间（expires）</h2><ul>
<li><p>expire </p>
<pre><code>127.0.0.1:6379&gt; set key uuuuuuu
OK
127.0.0.1:6379&gt; expire key 5
(integer) 1
127.0.0.1:6379&gt; get key
&quot;uuuuuuu&quot;
127.0.0.1:6379&gt; get key
(nil)
</code></pre></li>
<li><p>ttl 查询距离过期的剩余时间</p>
<pre><code>127.0.0.1:6379&gt; set key 100 ex 10
OK
127.0.0.1:6379&gt; ttl key
(integer) 6
127.0.0.1:6379&gt; ttl key
(integer) 2
127.0.0.1:6379&gt; ttl key
(integer) -2
</code></pre></li>
</ul>
<h2 id="u5217_u8868_uFF08Lists_uFF09"><a href="#u5217_u8868_uFF08Lists_uFF09" class="headerlink" title="列表（Lists）"></a>列表（Lists）</h2><ul>
<li>lpush 从头部添加元素</li>
<li>rpush 从尾部添加元素</li>
<li>lrange 查询某个范围内的元素，索引从0开始，-1表示最后一个元素，-2表示倒数第二个元素，以此类推</li>
<li>lpop 从头部移除元素</li>
<li>rpop 从尾部移除元素</li>
<li>ltrim 截取某个范围内的元素，并将结果赋值给该列表</li>
</ul>
<pre><code>lpush testList b
lpush testList a
rpush testList c
lrange testList 0 3
lpop testList
rpop testList
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<p>Redis可以支持存储不同格式的数据，Redis是一个数据结构服务器，它不是简单的key-value存储，以下是可以作为存储的类型：</p>
<ul>
<li>二进制安全的字符串</li>
<li>列表（Lists），按顺序插入的字符串元素的集合</li>
<li>集合（Sets），是不重复的并且无序的</li>
</ul>]]>
    
    </summary>
    
      <category term="Redis" scheme="http://chuiliu.github.io/tags/Redis/"/>
    
      <category term="Redis" scheme="http://chuiliu.github.io/categories/Redis/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Maven 添加本地依赖包]]></title>
    <link href="http://chuiliu.github.io/2016/09/01/Maven%E6%B7%BB%E5%8A%A0%E5%A4%96%E9%83%A8%E4%BE%9D%E8%B5%96%E5%8C%85/"/>
    <id>http://chuiliu.github.io/2016/09/01/Maven添加外部依赖包/</id>
    <published>2016-09-01T05:48:53.000Z</published>
    <updated>2016-09-26T15:47:32.870Z</updated>
    <content type="html"><![CDATA[<p>在实际项目开发中，项目使用到的jar包不一定来自Maven远程仓库，也可能来自本地的jar包，这时候也可以配置<code>pom.xml</code>添加本地包的依赖，具体配置如下：</p>
<pre><code class="xml">&lt;dependency&gt;
    &lt;groupId&gt;com.taobao.api&lt;/groupId&gt;
    &lt;artifactId&gt;com.taobao.api&lt;/artifactId&gt;
    &lt;version&gt;1.0.0&lt;/version&gt;
    &lt;scope&gt;system&lt;/scope&gt;
    &lt;systemPath&gt;${basedir}/src/main/java/WEB-INF/lib/taobao-sdk-java-auto_1455552377940-20160505.jar&lt;/systemPath&gt;
&lt;/dependency&gt;
</code></pre>
]]></content>
    <summary type="html">
    <![CDATA[<p>在实际项目开发中，项目使用到的jar包不一定来自Maven远程仓库，也可能来自本地的jar包，这时候也可以配置<code>pom.xml</code>添加本地包的依赖，具体配置如下：</p>
<pre><code class="xml">&lt;dependency&gt;]]>
    </summary>
    
      <category term="Java" scheme="http://chuiliu.github.io/tags/Java/"/>
    
      <category term="Maven" scheme="http://chuiliu.github.io/tags/Maven/"/>
    
      <category term="Java" scheme="http://chuiliu.github.io/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JHipster 中使用 Config Server]]></title>
    <link href="http://chuiliu.github.io/2016/08/31/JHipster%E4%B8%AD%E4%BD%BF%E7%94%A8Config%20Server/"/>
    <id>http://chuiliu.github.io/2016/08/31/JHipster中使用Config Server/</id>
    <published>2016-08-31T08:32:10.000Z</published>
    <updated>2016-09-26T15:57:15.356Z</updated>
    <content type="html"><![CDATA[<h3 id="JHipster_u4E2D_u4F7F_u7528Config_Server"><a href="#JHipster_u4E2D_u4F7F_u7528Config_Server" class="headerlink" title="JHipster中使用Config Server"></a>JHipster中使用Config Server</h3><p>JHipster中当启动一个微服务或者网关时，首先会连接到JHipster Registry去获取相应的配置信息，而微服务工程下的配置信息将被覆盖（只覆盖某个配置项的值，不会覆盖整个文件），可在<a href="http://localhost:8761/#/config" target="_blank" rel="external">http://localhost:8761/#/config</a>下查看各个微服务在JHipster Registry中的配置信息</p>
<ul>
<li>开发环境一般使用本地文件系统来保存</li>
<li>生产环境使用git仓库服务器上的配置</li>
</ul>
<p>保存配置文件的地址需要在<code>jhipster-registry</code>下的<code>application-dev.yml</code>中配置，配置如下：</p>
<pre><code class="python">spring:
    profiles:
        active: dev
        include: native
    cloud:
        config:
            server:
                native:
                     # 绝对路径配置：search-locations: file:///E:/config-repo
                     search-locations: file:./central-config
                git:
                    uri: https://github.com/chuiliu/config-repo
</code></pre>
<p>以上配置项说明：</p>
<ul>
<li><code>spring.profiles.active:dev</code>：使用开发环境的配置</li>
<li><code>spring.profiles.include:git</code>：使用本地文件系统的配置，如果要使用远程git仓库的配置，则需修改<code>spring.profiles.include</code>值为<code>git</code></li>
</ul>
<p>默认命名规则：<strong>{微服务名}[-dev|prod].yml</strong>，<br>此外，命名为<code>application[-dev|prod].yml</code>的配置文件将对所有注册到注册中心的微服务和网关起作用，可以在其中配置各个微服务所共有的信息。</p>
<p>例如：</p>
<blockquote>
<p>在名为gateway的网关的生产环境的配置文件应命名为：gateway-prod.yml<br>名为users的微服务的配置文件则命名为：users-prod.yml</p>
</blockquote>
<p>可在各个微服务项目下的<code>bootstrap[-dev|prod].yml</code>文件中修改以下配置项来定义配置文件名：</p>
<pre><code>spring:
    cloud:
        config:
            name: newFilename
</code></pre><ul>
<li>demo地址：<a href="https://github.com/chuiliu/jhipster-microservice-demo" target="_blank" rel="external">https://github.com/chuiliu/jhipster-microservice-demo</a></li>
<li>config server仓库地址：<a href="https://github.com/chuiliu/config-repo" target="_blank" rel="external">https://github.com/chuiliu/config-repo</a></li>
</ul>
<p>测试users微服务：</p>
<pre><code class="java">package com.mycompany.myapp.web.rest;

import io.swagger.annotations.Api;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.cloud.context.config.annotation.RefreshScope;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

/**
 * Created by Administrator on 2016/8/30.
 */
@RestController
@RequestMapping(&quot;/api&quot;)
@Api(value = &quot;/api&quot;, description = &quot;test&quot;, position = 1)
// 测试自动刷新配置
@ConfigurationProperties
public class testConfigResource {

    @Value(&quot;${testData.user.id:defaultValue}&quot;)
    private String id;

    @Value(&quot;${testData.user.name:defaultValue}&quot;)
    private String name;

    @Value(&quot;${testData.user.remark:defaultValue}&quot;)
    private String remark;

    @RequestMapping(value = &quot;test_id&quot;, method = RequestMethod.GET)
    public String testIntroduction() {
        return &quot;id：&quot; + id;
    }

    @RequestMapping(value = &quot;test_name&quot;, method = RequestMethod.GET)
    public String testName() {
        return &quot;name：&quot; + name;
    }

    @RequestMapping(value = &quot;test_remark&quot;, method = RequestMethod.GET)
    public String testRemark() {
        return &quot;remark：&quot; + remark;
    }
}
</code></pre>
<p>项目配置如下：</p>
<ul>
<li><p>users微服务工程下<code>application-dev.yml</code>的配置项：</p>
<pre><code class="python">testData:
  user:
      id: users微服务项目下配置文件中的id值
      name: users微服务项目下配置文件中的name值
      remark: users微服务项目下配置文件中的remark值（在本地文件系统中的配置和git远程仓库中均没有配置这个值）
</code></pre>
</li>
<li><p><code>jhipster-registry</code>下的<code>application-dev.yml</code>中配置：</p>
<pre><code class="python">spring:
  profiles:
      active: dev
      include: git
  cloud:
      config:
          server:
              git:
                  uri: https://github.com/chuiliu/config-repo
</code></pre>
</li>
<li><p>本地文件系统<code>file:./central-config</code>下<code>users.yml</code>的配置项：</p>
<pre><code class="python">testData:
  user:
      id: 本地文件系统配置文件中的id值
      name: 本地文件系统配置文件中的name值
</code></pre>
</li>
<li><p>远程git仓库下<code>users-dev.yml</code>的配置项：</p>
<pre><code class="python">testData:
  user:
      id: git远程仓库下配置文件中的id值
      name: git远程仓库下配置文件中的name值
</code></pre>
</li>
</ul>
<p>在swagger测试结果如下：<br><img src="http://o743aqnrb.bkt.clouddn.com/config%20server%20testtest-id.png" alt="http://o743aqnrb.bkt.clouddn.com/config%20server%20testtest-id.png"></p>
<p><img src="http://o743aqnrb.bkt.clouddn.com/config%20server%20testtest-name.png" alt="http://o743aqnrb.bkt.clouddn.com/config%20server%20testtest-name.png"></p>
<p>因为远程git仓库下没有配置remark的值，因此取到的值是微服务工程下配置的：<br><img src="http://o743aqnrb.bkt.clouddn.com/config%20server%20testtest-reamrk.png" alt="http://o743aqnrb.bkt.clouddn.com/config%20server%20testtest-reamrk.png"></p>
<p>参考：<a href="http://www.infoq.com/cn/articles/spring-cloud-service-wiring" target="_blank" rel="external">http://www.infoq.com/cn/articles/spring-cloud-service-wiring</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="JHipster_u4E2D_u4F7F_u7528Config_Server"><a href="#JHipster_u4E2D_u4F7F_u7528Config_Server" class="headerlink" title="JHipster中使用Con]]>
    </summary>
    
      <category term="JHipster" scheme="http://chuiliu.github.io/tags/JHipster/"/>
    
      <category term="Java" scheme="http://chuiliu.github.io/tags/Java/"/>
    
      <category term="Java" scheme="http://chuiliu.github.io/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JHipster 生成的 gateway 服务网关启动无法自动建表]]></title>
    <link href="http://chuiliu.github.io/2016/08/28/JHipster%E7%94%9F%E6%88%90%E7%9A%84gateway%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8%E6%97%A0%E6%B3%95%E8%87%AA%E5%8A%A8%E5%88%9B%E5%BB%BA%E8%A1%A8/"/>
    <id>http://chuiliu.github.io/2016/08/28/JHipster生成的gateway服务网关微服务启动无法自动创建表/</id>
    <published>2016-08-28T03:46:12.000Z</published>
    <updated>2016-09-26T15:42:49.456Z</updated>
    <content type="html"><![CDATA[<p>在使用JHipster生成的网关微服务启动时报错，无法生成用户数据库，导致无法进行后续的用户注册和登录，具体报错信息如下：</p>
<p>Incorrect table definition; there can be only one TIMESTAMP column with CURRENT_TIMESTAMP in DEFAULT or ON UPDATE clause [Failed SQL: CREATE TABLE gateway.jhi_user (id BIGINT AUTO_INCREMENT NOT NULL, login VARCHAR(50) NOT NULL, password_hash VARCHAR(60) NULL, first_name VARCHAR(50) NULL, last_name VARCHAR(50) NULL, email VARCHAR(100) NULL, activated BIT(1) NOT NULL, lang_key VARCHAR(5) NULL, activation_key VARCHAR(20) NULL, reset_key VARCHAR(20) NULL, created_by VARCHAR(50) NOT NULL, created_date timestamp DEFAULT NOW() NOT NULL, reset_date timestamp NULL, last_modified_by VARCHAR(50) NULL, last_modified_date timestamp DEFAULT NOW() NULL, CONSTRAINT PK_JHI_USER PRIMARY KEY (id), UNIQUE (email), UNIQUE (login))]</p>
<p>这个错误是数据库版本导致的，在一个mysql数据表中同时使用了多个timesatmp类型的字段并且都设置了默认值时，低版本MySQL不支持多个CURRENT_TIMESTAMP默认值，MySQL5.6.5以上版本则允许。</p>
<p>我是使用的数据库版本是MySQL5.1，重新安装为MySQL5.7后问题就解决了。</p>
<p>参考：<a href="http://stackoverflow.com/questions/4489548/why-there-can-be-only-one-timestamp-column-with-current-timestamp-in-default-cla" target="_blank" rel="external">http://stackoverflow.com/questions/4489548/why-there-can-be-only-one-timestamp-column-with-current-timestamp-in-default-cla</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在使用JHipster生成的网关微服务启动时报错，无法生成用户数据库，导致无法进行后续的用户注册和登录，具体报错信息如下：</p>
<p>Incorrect table definition; there can be only one TIMESTAMP column w]]>
    </summary>
    
      <category term="JHipster" scheme="http://chuiliu.github.io/tags/JHipster/"/>
    
      <category term="MySQL" scheme="http://chuiliu.github.io/tags/MySQL/"/>
    
      <category term="MySQL" scheme="http://chuiliu.github.io/categories/MySQL/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[MySQL 开启允许公网连接]]></title>
    <link href="http://chuiliu.github.io/2016/08/06/mysql%E5%BC%80%E5%90%AF%E5%85%81%E8%AE%B8%E5%85%AC%E7%BD%91%E8%BF%9E%E6%8E%A5/"/>
    <id>http://chuiliu.github.io/2016/08/06/mysql开启允许公网连接/</id>
    <published>2016-08-06T15:08:45.000Z</published>
    <updated>2016-08-06T16:02:07.931Z</updated>
    <content type="html"><![CDATA[<p>部署项目后，发现本地无法连接到MySQL远程数据库：<br>原因一：MySQL没有允许公网访问<br>查看是否公网访问：</p>
<pre><code>netstat
</code></pre><p>如果mysql的<code>Local Address</code>列的值是<code>127.0.0.1:3306</code>，则说明没有开启公网访问<br>解决方法：<br>修改mysql配置文件<code>/etc/mysql/my.cnf</code>，将<code>bind-address</code>的值改为<code>0.0.0.0</code></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>部署项目后，发现本地无法连接到MySQL远程数据库：<br>原因一：MySQL没有允许公网访问<br>查看是否公网访问：</p>
<pre><code>netstat
</code></pre><p>如果mysql的<code>Local Address</code>列的值]]>
    </summary>
    
      <category term="MySQL" scheme="http://chuiliu.github.io/tags/MySQL/"/>
    
      <category term="MySQL" scheme="http://chuiliu.github.io/categories/MySQL/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Redis 使用笔记（一）]]></title>
    <link href="http://chuiliu.github.io/2016/08/06/redis%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B01/"/>
    <id>http://chuiliu.github.io/2016/08/06/redis使用笔记1/</id>
    <published>2016-08-06T15:06:06.000Z</published>
    <updated>2016-12-07T06:10:25.819Z</updated>
    <content type="html"><![CDATA[<p>最近项目用到redis作为内存数据库，</p>
<p>windows系统启动redis</p>
<pre><code>redis-server
</code></pre><a id="more"></a>
<p>客户端连接到redis服务器</p>
<pre><code>redis-cli
</code></pre><h3 id="Linux_u4E0B_u7684_u64CD_u4F5C"><a href="#Linux_u4E0B_u7684_u64CD_u4F5C" class="headerlink" title="Linux下的操作"></a>Linux下的操作</h3><ol>
<li>下载Redis<pre><code class="shell">wget http://download.redis.io/releases/redis-3.2.3.tar.gz
</code></pre>
</li>
<li>解压<pre><code class="shell">tar xzf redis-3.2.3.tar.gz
</code></pre>
</li>
<li>编译<pre><code>cd redis-3.2.3
make
</code></pre></li>
</ol>
<p>通过redis客户端连接到redis服务器</p>
<pre><code>redis-cli
</code></pre><p>连接到服务器后，可以使用info命令查看和操作redis数据库：<br>查看redis的详细信息</p>
<pre><code>info
</code></pre><p>操作</p>
<pre><code>127.0.0.1:6379&gt; set key hello
OK
127.0.0.1:6379&gt; get key
&quot;hello&quot;
127.0.0.1:6379&gt;
</code></pre><p>如果需要redis在以后台程序的方式运行，以下命令启动</p>
<pre><code>redis-server &amp;
</code></pre><p>或者将<code>redis.conf</code>配置文件中的<code>daemonize</code>值修改为<code>yes</code></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近项目用到redis作为内存数据库，</p>
<p>windows系统启动redis</p>
<pre><code>redis-server
</code></pre>]]>
    
    </summary>
    
      <category term="Redis" scheme="http://chuiliu.github.io/tags/Redis/"/>
    
      <category term="Redis" scheme="http://chuiliu.github.io/categories/Redis/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[MySQL 使用笔记]]></title>
    <link href="http://chuiliu.github.io/2016/07/31/mysql%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
    <id>http://chuiliu.github.io/2016/07/31/mysql使用笔记/</id>
    <published>2016-07-31T11:35:38.000Z</published>
    <updated>2017-01-01T15:44:07.428Z</updated>
    <content type="html"><![CDATA[<h3 id="MySQL_u4FEE_u6539_u7528_u6237_u5BC6_u7801"><a href="#MySQL_u4FEE_u6539_u7528_u6237_u5BC6_u7801" class="headerlink" title="MySQL修改用户密码"></a>MySQL修改用户密码</h3><ul>
<li>修改root密码</li>
</ul>
<pre><code class="sql">SET PASSWORD FOR &#39;root&#39;@&#39;localhost&#39; = PASSWORD(&#39;new password&#39;);
</code></pre>
<h3 id="u521B_u5EFA_u7528_u6237_u5E76_u6388_u6743"><a href="#u521B_u5EFA_u7528_u6237_u5E76_u6388_u6743" class="headerlink" title="创建用户并授权"></a>创建用户并授权</h3><ul>
<li>创建用户</li>
</ul>
<pre><code class="sql">-- 用户允许来自所有主机地址的登录
CREATE USER username IDENTIFIED BY &#39;password&#39;;

-- 限制只能在localhost登录
CREATE USER &#39;username&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;password&#39;;
</code></pre>
<ul>
<li>授权</li>
</ul>
<pre><code class="sql">GRANT All ON databasename.* TO &#39;username&#39;@&#39;localhost&#39;;

-- 使用%表示来自任何地址的连接
GRANT All ON databasename.* TO &#39;username&#39;@&#39;%&#39;;

-- 授予允许来自所有主机地址，并且对所有数据库的操作权限
GRANT All ON *.* TO &#39;username&#39;@&#39;%&#39;;

-- 授予指定权限
GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, ALTER, GRANT ON *.* TO &#39;username&#39;@&#39;%&#39;;
</code></pre>
<h3 id="u4F7F_u7528sum_u65F6_u5982_u679C_u6CA1_u8BB0_u5F55_u4E0D_u8FD4_u56DEnull_uFF0C_u9700_u8981_u8FD4_u56DE0_u7684_u89E3_u51B3_u65B9_u6CD5"><a href="#u4F7F_u7528sum_u65F6_u5982_u679C_u6CA1_u8BB0_u5F55_u4E0D_u8FD4_u56DEnull_uFF0C_u9700_u8981_u8FD4_u56DE0_u7684_u89E3_u51B3_u65B9_u6CD5" class="headerlink" title="使用sum时如果没记录不返回null，需要返回0的解决方法"></a>使用sum时如果没记录不返回null，需要返回0的解决方法</h3><pre><code>select coalesce(sum(price), 0) as total group by type;
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="MySQL_u4FEE_u6539_u7528_u6237_u5BC6_u7801"><a href="#MySQL_u4FEE_u6539_u7528_u6237_u5BC6_u7801" class="headerlink" title="MySQL修改用户密]]>
    </summary>
    
      <category term="MySQL" scheme="http://chuiliu.github.io/tags/MySQL/"/>
    
      <category term="MySQL" scheme="http://chuiliu.github.io/categories/MySQL/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用iconfont字体图标]]></title>
    <link href="http://chuiliu.github.io/2016/07/02/%E4%BD%BF%E7%94%A8iconfont%E5%AD%97%E4%BD%93%E5%9B%BE%E6%A0%87/"/>
    <id>http://chuiliu.github.io/2016/07/02/使用iconfont字体图标/</id>
    <published>2016-07-02T08:30:47.000Z</published>
    <updated>2016-12-07T06:13:01.927Z</updated>
    <content type="html"><![CDATA[<p>最近在做移动web app项目，前端很多地方需要用到小图标，移动端不像PC端，图标的选择几乎不会去用到图片，因为要做不同屏幕的适配，一般更好的选择是使用字体图标，这样就可以通过CSS随意控制图标的大小和颜色了。项目用到的是<code>iconfont</code>，下面就介绍下如何使用 <a href="https://icomoon.io/app/#/select" target="_blank" rel="external">icomoon图标制作工具</a> 来快速生成字体图标。</p>
<p>首先到<a href="http://iconfont.cn/" target="_blank" rel="external">http://iconfont.cn/</a>，选择到需要用到的图标。<br>通过搜索找一个微信图标：<br><img src="http://o743aqnrb.bkt.clouddn.com/20160702/iconfont-1.png" alt=""></p>
<a id="more"></a>
<p>选择或者自己填写合适的颜色，然后选择SVG下载:<br><img src="http://o743aqnrb.bkt.clouddn.com/20160702/iconfont-2.png" alt=""></p>
<p>下载完成后，打开 <a href="https://icomoon.io/app/#/select" target="_blank" rel="external">icomoon图标制作工具</a> ，点击左上角的“Import Icons”将刚刚下载的 weixin.svg 导入。<br><img src="http://o743aqnrb.bkt.clouddn.com/20160702/iconfont-3.png" alt=""></p>
<p>这时候可以在页面看到刚刚的微信图标成功上传，你只需鼠标选中界面上任何需要用到的图标，例如我选中了刚刚上传的微信图标、铅笔图标、音乐图标，点击右下角的“Generate Font”按钮进行创建，每个图标右边的输入框将对应到时候生成的类名<code>icon-*</code>，可以直接修改，再点击dowload下载就行了。<br><img src="http://o743aqnrb.bkt.clouddn.com/20160702/iconfont-4.png" alt=""><br><img src="http://o743aqnrb.bkt.clouddn.com/20160702/iconfont-5.png" alt=""></p>
<p>icomoon将自动生成css文件和示例<code>demo.html</code>，使用时只需要添加该图标对应的class就可以。</p>
<pre><code class="html">&lt;span class=&quot;icon-weixin&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;icon-pencil&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;icon-images&quot;&gt;&lt;/span&gt;
</code></pre>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近在做移动web app项目，前端很多地方需要用到小图标，移动端不像PC端，图标的选择几乎不会去用到图片，因为要做不同屏幕的适配，一般更好的选择是使用字体图标，这样就可以通过CSS随意控制图标的大小和颜色了。项目用到的是<code>iconfont</code>，下面就介绍下如何使用 <a href="https://icomoon.io/app/#/select">icomoon图标制作工具</a> 来快速生成字体图标。</p>
<p>首先到<a href="http://iconfont.cn/">http://iconfont.cn/</a>，选择到需要用到的图标。<br>通过搜索找一个微信图标：<br><img src="http://o743aqnrb.bkt.clouddn.com/20160702/iconfont-1.png" alt=""></p>]]>
    
    </summary>
    
      <category term="前端" scheme="http://chuiliu.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="前端" scheme="http://chuiliu.github.io/categories/fe/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CSS 相关浏览器兼容问题 [1]]]></title>
    <link href="http://chuiliu.github.io/2016/06/14/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9/"/>
    <id>http://chuiliu.github.io/2016/06/14/浏览器兼容/</id>
    <published>2016-06-14T14:26:29.000Z</published>
    <updated>2016-12-11T04:34:52.726Z</updated>
    <content type="html"><![CDATA[<p>在填坑。</p>
<h3 id="u95EE_u98981_uFF1AIE7_u4E0B_uFF0C_u5982_u679C_u6D6E_u52A8_u5143_u7D20_u524D_u9762_u7684_u5144_u5F1F_u5143_u7D20_u4E2D_u5B58_u5728_u884C_u5185_u5143_u7D20_uFF0C_u6D6E_u52A8_u5143_u7D20_u4F1A_u6389_u5230_u4E0B_u4E00_u884C"><a href="#u95EE_u98981_uFF1AIE7_u4E0B_uFF0C_u5982_u679C_u6D6E_u52A8_u5143_u7D20_u524D_u9762_u7684_u5144_u5F1F_u5143_u7D20_u4E2D_u5B58_u5728_u884C_u5185_u5143_u7D20_uFF0C_u6D6E_u52A8_u5143_u7D20_u4F1A_u6389_u5230_u4E0B_u4E00_u884C" class="headerlink" title="问题1：IE7下，如果浮动元素前面的兄弟元素中存在行内元素，浮动元素会掉到下一行"></a>问题1：IE7下，如果浮动元素前面的兄弟元素中存在行内元素，浮动元素会掉到下一行</h3><pre><code class="html">&lt;div class=&quot;container&quot;&gt;
    &lt;span&gt;span&lt;/span&gt;
    &lt;span&gt;span&lt;/span&gt;
    &lt;div class=&quot;left&quot;&gt;左浮动的div&lt;/div&gt;
    &lt;div class=&quot;right&quot;&gt;右浮动的div&lt;/div&gt;
&lt;/div&gt;
</code></pre>
<p>chrome，firefox下：<br><img src="http://o743aqnrb.bkt.clouddn.com/20160614/2016-06-14_234454.png" alt=""><br>IE7下：<br><img src="http://o743aqnrb.bkt.clouddn.com/20160614/2016-06-14_234534.png" alt=""><br>解决：</p>
<ol>
<li>针对IE7为浮动元素设置负的margin-top值</li>
<li>将浮动元素写到行内元素前面<pre><code class="html">&lt;div class=&quot;container&quot;&gt;
 &lt;div class=&quot;left&quot;&gt;左浮动的div&lt;/div&gt;
 &lt;div class=&quot;right&quot;&gt;右浮动的div&lt;/div&gt;
 &lt;span&gt;span&lt;/span&gt;
 &lt;span&gt;span&lt;/span&gt;
&lt;/div&gt;
</code></pre>
</li>
</ol>
<h3 id="u95EE_u98982_uFF1AIE6_u4E0D_u8BA4_u8BC6min-height"><a href="#u95EE_u98982_uFF1AIE6_u4E0D_u8BA4_u8BC6min-height" class="headerlink" title="问题2：IE6不认识min-height"></a>问题2：IE6不认识min-height</h3><p>解决：</p>
<pre><code class="css">div {
    min-height: 200px;
    height: 200px!important;  /* 因为IE6不识别!important，这一句对IE6无效*/
    height: 200px;            /* 这一句对IE6生效，IE6盒子的高度会被内容撑大，即使设置了高度，因此这样做的效果和min-height是一样的*/
}
</code></pre>
<h3 id="u95EE_u98983_uFF1AIE8_2C_9_2C_10__u4E0B_u6807_u7B7E_u4E2D_u7684_u56FE_u7247_u4F1A_u51FA_u73B0_u8FB9_u6846"><a href="#u95EE_u98983_uFF1AIE8_2C_9_2C_10__u4E0B_u6807_u7B7E_u4E2D_u7684_u56FE_u7247_u4F1A_u51FA_u73B0_u8FB9_u6846" class="headerlink" title="问题3：IE8, 9, 10 下<a>标签中的图片会出现边框"></a>问题3：IE8, 9, 10 下<a>标签中的图片会出现边框</a></h3><p>直接去掉边框：</p>
<pre><code class="css">img {
    border:none;
}
</code></pre>
]]></content>
    <summary type="html">
    <![CDATA[<p>在填坑。</p>
<h3 id="u95EE_u98981_uFF1AIE7_u4E0B_uFF0C_u5982_u679C_u6D6E_u52A8_u5143_u7D20_u524D_u9762_u7684_u5144_u5F1F_u5143_u7D20_u4E2D_u5]]>
    </summary>
    
      <category term="CSS" scheme="http://chuiliu.github.io/tags/CSS/"/>
    
      <category term="前端" scheme="http://chuiliu.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="浏览器兼容" scheme="http://chuiliu.github.io/tags/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9/"/>
    
      <category term="前端" scheme="http://chuiliu.github.io/categories/fe/"/>
    
      <category term="CSS" scheme="http://chuiliu.github.io/categories/fe/CSS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[用Node.js爬虫下载花瓣网画板的图片]]></title>
    <link href="http://chuiliu.github.io/2016/06/10/%E7%94%A8Node-js%E7%88%AC%E8%99%AB%E4%B8%8B%E8%BD%BD%E8%8A%B1%E7%93%A3%E7%BD%91%E7%94%BB%E6%9D%BF%E5%9B%BE%E7%89%87/"/>
    <id>http://chuiliu.github.io/2016/06/10/用Node-js爬虫下载花瓣网画板图片/</id>
    <published>2016-06-10T13:01:17.000Z</published>
    <updated>2016-12-13T06:06:23.756Z</updated>
    <content type="html"><![CDATA[<p>记一次略坑的过程。 <a href="https://github.com/chuiliu/huaban_crawler/blob/master/app.js" target="_blank" rel="external">源码地址</a></p>
<p>最近刚好同学毕设在做爬虫，看了一下，如果不是搞得太复杂的话主要只是写些正则，于是我尝试写个Node版的简单点的，很喜欢逛花瓣网，有时想批量下载，但是却没办法下载整个画板的图片，因此不妨把喜欢的画板图片爬下来并一次性下载到本地。做个功能给自己用也好。</p>
<p>首先是找到任意画板的地址，于是我随意找了个宫崎骏的画板进去，<a href="http://huaban.com/boards/25498000/" target="_blank" rel="external">http://huaban.com/boards/25498000/</a>，其实多研究几个url，观察其区别，不难发现，这个url对我们的有效信息就是<code>25498000</code>，也就是画板ID。</p>
<p>然而当我打开源代码查看时，什么鬼，网页全是用js渲染的，不能用<code>cheerio</code>来解决问题了，只能想一下有什么捷径，看到有可以用<code>Phantom.js</code>，感觉比较麻烦，我只是想下载图片而已，继续研究下数据看看是否有必要再说。</p>
<p>于是我打开Chrome控制台，可以发现，当我们点开画板中的图片或者下拉加载更多时，ajax会去请求这么一个url：<a href="http://huaban.com/boards/25498000/?iwlq03dw&amp;max=580817693&amp;limit=20&amp;wfl=1" target="_blank" rel="external">http://huaban.com/boards/25498000/?iwlq03dw&amp;max=580817693&amp;limit=20&amp;wfl=1</a>，这个请求对应的响应信息中<code>pins</code>字段下有画板中20张图片的信息，并且是规规则则的js对象，很明显url中<code>limit=20</code>就是获取前20张图片的意思，我们可以改变这个值来获取，而<code>pin_count
:408</code>就是这个画板的总图片数量。感觉还是勉强可以通过正则来取出我们要的<code>json</code>数据的。</p>
<p><img src="http://o743aqnrb.bkt.clouddn.com/%E8%8A%B1%E7%93%A3%E7%BD%91%E7%88%AC%E8%99%AB/%E7%88%AC%E8%99%AB2.png" alt=""></p>
<p>于是就试了下，先把数据打印出来看看</p>
<pre><code>var http = require(&#39;http&#39;);
var url = &#39;http://huaban.com/boards/25498000/?iwlq03dw&amp;max=580817693&amp;limit=20&amp;wfl=1&#39;;
http.get(url, function(res) {
    var html = &#39;&#39;;
    res.on(&#39;data&#39;, function(data) {
        html += data;
    });
    res.on(&#39;end&#39;, function() {
        console.log(html)
    });
});
</code></pre><p><img src="http://o743aqnrb.bkt.clouddn.com/%E8%8A%B1%E7%93%A3%E7%BD%91%E7%88%AC%E8%99%AB/%E7%88%AC%E8%99%AB1.png" alt=""></p>
<p>找到我要的信息是放在<code>app.page[&quot;board&quot;]</code>，于是我从这里开始截取，截取到对象的结束处，对象结束处的标志是<code>};</code>的出现，于是构造成json数据。</p>
<pre><code class="javascript">/**
 * 取到画板数据
 */
var getBoardObj = function(html) {
    var board = /(app\.page\[&quot;board&quot;\]).*};/.exec(html)[0];
    board = board.substring(17, board.length - 1).trim().substring(1);

    return JSON.parse(board);
};
</code></pre>
<p>尝试打印出来，并替换多个url测试，最终确认是可行的，感觉快可以实现了。</p>
<p>但是经过一番研究，发现当把<code>limit</code>的值变成画板总图片数量时并不能获取到所有数据，经测试花瓣网限制住了只能获取到100张，路又走不通了。<br>最终经过重重失败和测试，终于发现max是上一页的最后一张图片的id，而那个没有值的参数<code>iwlq03dw</code>是会变的，最后一位从a-z再从0-9重复循环，可能只是个标识吧，无法知道具体是做什么用的，但发现不影响得到的数据。<br>于是就可以构造加载更多的url了。</p>
<pre><code class="javascript">/**
 * 加载更多
 */
var loadMore = function(url) {
    var nextUrl = url.replace(/max=\d*&amp;/, &#39;max=&#39; + images[images.length - 1].pin_id + &#39;&amp;&#39;);
    fetchData(nextUrl, downloadAll);
};
</code></pre>
<p>发现这些规律后好做多了，然而新的问题又来了，我们应该从哪一张图片开始获取呢？我所取到的url是加载第二页的数据的url，从这个url作为入口去获取只能获取到从第二页到最后一页的数据，第一页丢失了，又把自己带坑里了。折腾一番之后，猜测后台可能的实现逻辑，假如这个字段为空，一般我们写后台会从第一页数据开始获取吧，于是测试下，果然，发现不填max值也可以获取数据，并且是从第一页，感觉又可以有追求了。</p>
<p>程序实现思路：先分页请求，把图片全部取到，放到images数组里面，然后再下载images数组中的图片。</p>
<p>下载的时候使用<code>async</code>模块来控制并发，一次只给下载3张，每下载完成一张则callback一次，如果没控制的话，下载太多图最后会一直等待没响应。</p>
<pre><code>async.mapLimit(images, 3, function(image, callback) {
    // 下载
    download(image, callback);
}, function (err, result) {
    console.log(&#39;下载完成情况：&#39; + result);
});
</code></pre><p>下载方法的实现</p>
<pre><code>var ws = fs.createWriteStream(filePath);
ws.on(&#39;finish&#39;, function() {
    console.log(&#39;&#39; + filename + &#39; 已下载&#39;);
    callback(null, filename + &#39;下载成功&#39;);
});

http.get(imgUrl, function(res) {
    res.pipe(ws);
}).on(&#39;finish&#39;, function() {
    console.log(&#39;http请求完成: &#39;, imgUrl);
}).on(&#39;error&#39;, function() {
    console.log(&#39;error&#39;);
});
</code></pre><p>最终程序<br>&amp; 源码地址 <a href="https://github.com/chuiliu/huaban_crawler/blob/master/app.js" target="_blank" rel="external">爬取花瓣网画板图片</a></p>
<pre><code class="javascript">var http = require(&#39;http&#39;),
    fs = require(&#39;fs&#39;),
    async = require(&#39;async&#39;);


var url = &#39;http://huaban.com/boards/155643/?ip44g0nc&amp;max=&amp;limit=20&amp;wfl=1&#39;,
    imageUrlBase = &#39;http://img.hb.aicdn.com/&#39;,
    downloadPath = &#39;download/&#39;;

// 保存所有图片
var images = [],
// 图片类型
    imagesTypes = {
    &#39;image/png&#39;: &#39;.png&#39;,
    &#39;image/jpeg&#39;: &#39;.jpg&#39;,
    &#39;image/bmp&#39;: &#39;.bmp&#39;,
    &#39;image/gif&#39;: &#39;.gif&#39;,
    &#39;image/x-icon&#39;: &#39;.ico&#39;,
    &#39;image/tiff&#39;: &#39;.tif&#39;,
    &#39;image/vnd.wap.wbmp&#39;: &#39;.wbmp&#39;
};

/**
 * 获取花瓣网数据
 */
var fetchData = function(url, callback) {
    console.log(&#39;开始抓取花瓣网图片地址&#39;);

    // 爬取数据
    http.get(url, function(res) {
        var html = &#39;&#39;;

        res.on(&#39;data&#39;, function(data) {
            html += data;
        });

        res.on(&#39;end&#39;, function() {
            // 取到画板数据
            var board = getBoardObj(html);

            var pins = board.pins;
            images = images.concat(pins);

            // 画板图片总数量
            var count = board.pin_count;
            console.log(&#39;已抓取到&#39; + board.pins.length + &#39;张图片的地址&#39;);

            if (images.length == count || pins.length == 0) {
                // 停止抓取
                console.log(&#39;抓取结束，即将下载&#39; + images.length + &#39;张图片&#39;);
                callback &amp;&amp; callback();
                return;
            } else {
                // 加载更多
                loadMore(url);
            }
        });
    }).on(&#39;error&#39;, function() {
        console.log(&#39;error&#39;);
    });
};


/**
 * 取到画板数据
 * @return {[type]} [description]
 */
var getBoardObj = function(html) {
    var board = /(app\.page\[&quot;board&quot;\]).*};/.exec(html)[0];
    board = board.substring(17, board.length - 1).trim().substring(1);

    return JSON.parse(board);
};


/**
 * 加载更多
 */
var loadMore = function(url) {
    var nextUrl = url.replace(/max=\d*&amp;/, &#39;max=&#39; + images[images.length - 1].pin_id + &#39;&amp;&#39;);
    fetchData(nextUrl, downloadAll);
};


var downloadAll = function() {
    // 创建名为画板ID的文件夹
    downloadPath += images[0].board_id + &#39;/&#39;;
    if(!fs.existsSync(downloadPath)) {
         fs.mkdirSync(downloadPath);
    }

    async.mapLimit(images, 3, function(image, callback) {
        // 下载
        download(image, callback);
    }, function (err, result) {
        console.log(&#39;下载完成情况：&#39; + result);
    });
};


/**
 * 下载图片
 */
var downloadCount = 0;
var download = function(image, callback) {

    var imgUrl =  imageUrlBase + image.file.key;
    var filename = image.file.id + (imagesTypes[image.file.type] || &#39;.jpg&#39;);
    var filePath = downloadPath + filename;

    if (fs.existsSync(filePath)) {
        console.log(&#39;图片 &#39;, filePath, &#39; 已存在&#39;);
        ++downloadCount;
        callback(null, &#39;图片已存在&#39;);
    } else {
        var ws = fs.createWriteStream(filePath);
        ws.on(&#39;finish&#39;, function() {
            console.log(&#39;&#39; , filename, &#39; 已下载，总下载进度&#39;, 100 * (++downloadCount / images.length).toFixed(2), &#39;%&#39;);
            callback(null, filename + &#39;下载成功&#39;);
        });

        http.get(imgUrl, function(res) {
            res.pipe(ws);
        }).on(&#39;finish&#39;, function() {
            console.log(&#39;http请求完成: &#39;, imgUrl);
        }).on(&#39;error&#39;, function() {
            console.log(&#39;error&#39;);
        });
    }
};



// begin
fetchData(url, downloadAll);
</code></pre>
<p>下载其它画板的话，将画板ID替换就可以了。</p>
<p>注：图片太大or太多会导致下载较慢。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>记一次略坑的过程。 <a href="https://github.com/chuiliu/huaban_crawler/blob/master/app.js" target="_blank" rel="external">源码地址</a></p>
<p>最近刚好同学毕设在]]>
    </summary>
    
      <category term="Javascrit" scheme="http://chuiliu.github.io/tags/Javascrit/"/>
    
      <category term="Node.js" scheme="http://chuiliu.github.io/tags/Node-js/"/>
    
      <category term="折腾" scheme="http://chuiliu.github.io/tags/%E6%8A%98%E8%85%BE/"/>
    
      <category term="爬虫" scheme="http://chuiliu.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="Node.js" scheme="http://chuiliu.github.io/categories/Node-js/"/>
    
  </entry>
  
</feed>
