<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[lonica]]></title>
  <subtitle><![CDATA[什么鬼]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://chuiliu.github.io/"/>
  <updated>2016-12-04T13:00:38.981Z</updated>
  <id>http://chuiliu.github.io/</id>
  
  <author>
    <name><![CDATA[chuiliu]]></name>
    <email><![CDATA[767079315@qq.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[移动 webapp 开发相关要点]]></title>
    <link href="http://chuiliu.github.io/2016/11/15/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    <id>http://chuiliu.github.io/2016/11/15/移动开发/</id>
    <published>2016-11-14T16:10:33.000Z</published>
    <updated>2016-12-04T13:00:38.981Z</updated>
    <content type="html"><![CDATA[<p>最近接触了移动端开发，将开发中遇到的一些相关知识点记下来。</p>
<h4 id="viewport_uFF0C_u9875_u9762_u6BD4_u4F8B_u521D_u59CB_u5316_uFF0C_u7981_u6B62_u9875_u9762_u7684_u7F29_u653E_u884C_u4E3A"><a href="#viewport_uFF0C_u9875_u9762_u6BD4_u4F8B_u521D_u59CB_u5316_uFF0C_u7981_u6B62_u9875_u9762_u7684_u7F29_u653E_u884C_u4E3A" class="headerlink" title="viewport，页面比例初始化，禁止页面的缩放行为"></a>viewport，页面比例初始化，禁止页面的缩放行为</h4><pre><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=no&quot; /&gt;
</code></pre><p>页面宽度为设备宽度，高度为设备高度，初始缩放1倍，最大缩放1倍，最小缩放1倍， 禁止用户缩放行为<br><code>user-scalable=no</code>也可以写成<code>user-scalable=0</code></p>
<hr>
<h4 id="u7981_u6B62iPhone_u6D4F_u89C8_u5668_u4E0B_u7535_u8BDD_u53F7_u7801_u53EF_u4EE5_u70B9_u51FB_u62E8_u53F7"><a href="#u7981_u6B62iPhone_u6D4F_u89C8_u5668_u4E0B_u7535_u8BDD_u53F7_u7801_u53EF_u4EE5_u70B9_u51FB_u62E8_u53F7" class="headerlink" title="禁止iPhone浏览器下电话号码可以点击拨号"></a>禁止iPhone浏览器下电话号码可以点击拨号</h4><pre><code>&lt;meta name = &quot;format-detection&quot; content = &quot;telephone=no&quot;&gt;
</code></pre><p>如果禁止点击后，有个别地方需要设置回原来的拨打电话，则可以这样写</p>
<pre><code>&lt;a href = &quot;tel:13800000000&quot;&gt;call 13800000000&lt;/a&gt;
</code></pre><p>或者用js:</p>
<pre><code>location.href = &#39;tell:10086&#39;
</code></pre><a id="more"></a>
<hr>
<h4 id="u5728_u79FB_u52A8_u7AEF_uFF0C_u89E6_u53D1_u70B9_u51FB_u4E8B_u4EF6_u65F6_uFF08_u8D85_u94FE_u63A5_u6216_u8005click_u4E8B_u4EF6_uFF09_u4F1A_u6709_u9AD8_u4EAE_u7684_u80CC_u666F_u6846_u6765_u8868_u793A_u70B9_u51FB_u7684_u54CD_u5E94_uFF0C_u53EF_u4EE5_u5C06_u5176_u900F_u660E_u6389_u4E0D_u663E_u793A_uFF1A"><a href="#u5728_u79FB_u52A8_u7AEF_uFF0C_u89E6_u53D1_u70B9_u51FB_u4E8B_u4EF6_u65F6_uFF08_u8D85_u94FE_u63A5_u6216_u8005click_u4E8B_u4EF6_uFF09_u4F1A_u6709_u9AD8_u4EAE_u7684_u80CC_u666F_u6846_u6765_u8868_u793A_u70B9_u51FB_u7684_u54CD_u5E94_uFF0C_u53EF_u4EE5_u5C06_u5176_u900F_u660E_u6389_u4E0D_u663E_u793A_uFF1A" class="headerlink" title="在移动端，触发点击事件时（超链接或者click事件）会有高亮的背景框来表示点击的响应，可以将其透明掉不显示："></a>在移动端，触发点击事件时（超链接或者click事件）会有高亮的背景框来表示点击的响应，可以将其透明掉不显示：</h4><pre><code class="css">-webkit-tap-highlight-color: rgba(0,0,0,0);
// 或者
-webkit-tap-highlight-color: transparent;
</code></pre>
<hr>
<h4 id="u9650_u5236_u7528_u6237_u53EA_u80FD_u8F93_u5165_u7EAF_u6587_u672C_uFF08_u6307_u4E0D_u5E26_u6709_u6837_u5F0F_uFF0C_u6BD4_u5982_u590D_u5236_u7C98_u8D34_u6765_u7684_u6587_u672C_u53EF_u80FD_u5B57_u4F53_u5B57_u53F7_u989C_u8272_u7B49_u6837_u5F0F_u4E0D_u4E00_u6837_uFF09"><a href="#u9650_u5236_u7528_u6237_u53EA_u80FD_u8F93_u5165_u7EAF_u6587_u672C_uFF08_u6307_u4E0D_u5E26_u6709_u6837_u5F0F_uFF0C_u6BD4_u5982_u590D_u5236_u7C98_u8D34_u6765_u7684_u6587_u672C_u53EF_u80FD_u5B57_u4F53_u5B57_u53F7_u989C_u8272_u7B49_u6837_u5F0F_u4E0D_u4E00_u6837_uFF09" class="headerlink" title="限制用户只能输入纯文本（指不带有样式，比如复制粘贴来的文本可能字体字号颜色等样式不一样）"></a>限制用户只能输入纯文本（指不带有样式，比如复制粘贴来的文本可能字体字号颜色等样式不一样）</h4><pre><code class="css">p {-webkit-user-modify: read-write-plaintext-only;}
</code></pre>
<p>使用<code>user-modify</code></p>
<pre><code>-webkit-user-modify: read-only | read-write | read-write-plaintext-only  /*只读|可读写|可读写，内容只能是纯文本*/
</code></pre><hr>
<h4 id="u7981_u6B62_u7528_u6237_u8FDB_u884C_u6587_u672C_u9009_u62E9"><a href="#u7981_u6B62_u7528_u6237_u8FDB_u884C_u6587_u672C_u9009_u62E9" class="headerlink" title="禁止用户进行文本选择"></a>禁止用户进行文本选择</h4><pre><code class="css">-webkit-user-select: none;
user-select: none;
</code></pre>
<hr>
<h4 id="u5236_u4F5C_u534A_u50CF_u7D20_u8FB9_u6846"><a href="#u5236_u4F5C_u534A_u50CF_u7D20_u8FB9_u6846" class="headerlink" title="制作半像素边框"></a>制作半像素边框</h4><p>移动端下使用<code>border: 1px solid #ccc;</code>不一定就能产生1像素的边框线，有些手机会显示成比1像素粗的边框，可以通过伪类来做边框，可以做成比1像素纤细的半像素的下边框：</p>
<pre><code class="css">.border-bottom {
    position: relative;

    &amp;:after {
        position: absolute;
        content: &quot;&quot;;
        display: block;
        left: 0;
        bottom: 0;
        width: 100%;
        height: 1px;
        background: #ccc;
        -webkit-transform: scaleY(0.5);
                transform: scaleY(0.5);
    }
}
</code></pre>
<hr>
<h4 id="u53D6_u6D88_u8F93_u5165_u6846_u3001_u6587_u672C_u6846_u9ED8_u8BA4_u805A_u7126_u6837_u5F0F"><a href="#u53D6_u6D88_u8F93_u5165_u6846_u3001_u6587_u672C_u6846_u9ED8_u8BA4_u805A_u7126_u6837_u5F0F" class="headerlink" title="取消输入框、文本框默认聚焦样式"></a>取消输入框、文本框默认聚焦样式</h4><pre><code>input:focus, textarea:focus {outline: none;}
</code></pre><hr>
<h4 id="u4F7F_u7528localStorage"><a href="#u4F7F_u7528localStorage" class="headerlink" title="使用localStorage"></a>使用localStorage</h4><pre><code>localStorage.setItem(&#39;title&#39;, &#39;hello&#39;);
var title = localStorage.getItem(&#39;title&#39;);
// 移除
localStorage.removeItem(&#39;title&#39;);
</code></pre><hr>
<h4 id="u7126_u70B9"><a href="#u7126_u70B9" class="headerlink" title="焦点"></a>焦点</h4><pre><code>// 获取当前焦点
var ele = document.activeElement;
// 滚到焦点处
document.activeElement.scrollIntoViewIfNeeded();
</code></pre><hr>
<h4 id="u4FEE_u6539_u9009_u4E2D_u6587_u672C_u7684_u6837_u5F0F"><a href="#u4FEE_u6539_u9009_u4E2D_u6587_u672C_u7684_u6837_u5F0F" class="headerlink" title="修改选中文本的样式"></a>修改选中文本的样式</h4><p>使用<code>:selection</code>选择器</p>
<pre><code class="css">:selection: {
    background-color: #fffaf4;
}
</code></pre>
<hr>
<h4 id="u89E6_u6478_u4E8B_u4EF6"><a href="#u89E6_u6478_u4E8B_u4EF6" class="headerlink" title="触摸事件"></a>触摸事件</h4><pre><code>var ele = document.querySelector(&#39;#tab&#39;);
ele.addEventListener(&#39;touchStart&#39;, function(e) {
    e.preventDefault();
    touch = e.touches[0];
    var x = touch.pageX;
    var y = touch.pageY;
});
</code></pre><hr>
<h4 id="u4F7F_u7528_u5A92_u4F53_u67E5_u8BE2_u6765_u5B9E_u73B0_u54CD_u5E94_u5F0F_u5E03_u5C40"><a href="#u4F7F_u7528_u5A92_u4F53_u67E5_u8BE2_u6765_u5B9E_u73B0_u54CD_u5E94_u5F0F_u5E03_u5C40" class="headerlink" title="使用媒体查询来实现响应式布局"></a>使用媒体查询来实现响应式布局</h4><p>下面代码表示小于等于980px的屏幕，如果符合查询条件，则在@media里面定义的样式会覆盖之前的样式，要写的好不容易，写的时候还需要特别注意css的优先级。</p>
<pre><code>@media screen and (max-width: 980px) {
    // css code
}
</code></pre><hr>
<h4 id="u5F39_u6027_u76D2_u5B50_u5E03_u5C40"><a href="#u5F39_u6027_u76D2_u5B50_u5E03_u5C40" class="headerlink" title="弹性盒子布局"></a>弹性盒子布局</h4><pre><code>display: -webkit-box;
display: box;
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<p>最近接触了移动端开发，将开发中遇到的一些相关知识点记下来。</p>
<h4 id="viewport_uFF0C_u9875_u9762_u6BD4_u4F8B_u521D_u59CB_u5316_uFF0C_u7981_u6B62_u9875_u9762_u7684_u7F29_u653E_u884C_u4E3A"><a href="#viewport_uFF0C_u9875_u9762_u6BD4_u4F8B_u521D_u59CB_u5316_uFF0C_u7981_u6B62_u9875_u9762_u7684_u7F29_u653E_u884C_u4E3A" class="headerlink" title="viewport，页面比例初始化，禁止页面的缩放行为"></a>viewport，页面比例初始化，禁止页面的缩放行为</h4><pre><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=no&quot; /&gt;
</code></pre><p>页面宽度为设备宽度，高度为设备高度，初始缩放1倍，最大缩放1倍，最小缩放1倍， 禁止用户缩放行为<br><code>user-scalable=no</code>也可以写成<code>user-scalable=0</code></p>
<hr>
<h4 id="u7981_u6B62iPhone_u6D4F_u89C8_u5668_u4E0B_u7535_u8BDD_u53F7_u7801_u53EF_u4EE5_u70B9_u51FB_u62E8_u53F7"><a href="#u7981_u6B62iPhone_u6D4F_u89C8_u5668_u4E0B_u7535_u8BDD_u53F7_u7801_u53EF_u4EE5_u70B9_u51FB_u62E8_u53F7" class="headerlink" title="禁止iPhone浏览器下电话号码可以点击拨号"></a>禁止iPhone浏览器下电话号码可以点击拨号</h4><pre><code>&lt;meta name = &quot;format-detection&quot; content = &quot;telephone=no&quot;&gt;
</code></pre><p>如果禁止点击后，有个别地方需要设置回原来的拨打电话，则可以这样写</p>
<pre><code>&lt;a href = &quot;tel:13800000000&quot;&gt;call 13800000000&lt;/a&gt;
</code></pre><p>或者用js:</p>
<pre><code>location.href = &#39;tell:10086&#39;
</code></pre>]]>
    
    </summary>
    
      <category term="前端" scheme="http://chuiliu.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="移动端" scheme="http://chuiliu.github.io/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
      <category term="移动端" scheme="http://chuiliu.github.io/categories/mobile/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何快速搭建静态资源服务器]]></title>
    <link href="http://chuiliu.github.io/2016/10/19/%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://chuiliu.github.io/2016/10/19/如何快速搭建静态资源服务器/</id>
    <published>2016-10-19T13:29:30.000Z</published>
    <updated>2016-12-02T06:26:18.442Z</updated>
    <content type="html"><![CDATA[<p>前端开发中，经常遇到有些场景需要用到服务器环境，例如AngularJS中的路由，或者是模拟ajax获取数据等需求时，这个时候并不需要考虑到服务端逻辑，只是搭建简单的静态资源服务，因此解决方法有很多，下面介绍几种简单快捷的常用方式：</p>
<h2 id="u4F7F_u7528browser-sync"><a href="#u4F7F_u7528browser-sync" class="headerlink" title="使用browser-sync"></a>使用browser-sync</h2><p><a href="https://www.browsersync.io/" target="_blank" rel="external">browser-sync</a>，非常棒的工具，最吸引人的是它的监控和同步功能，体验非常好，可以不用一直f5刷新浏览器即可实时看到修改了的变化。只要在同个局域网，还可以在手机上也同步看到变化，不需要手动刷新，非常适合移动端调试，很推荐使用。<br>安装：</p>
<pre><code>npm install -g browser-sync
</code></pre><p>在项目根目录执行：</p>
<pre><code>browser-sync start --server --files &quot;css/*.css&quot;
# 也可以配置多项，或者通配符匹配任意目录
browser-sync start --server --files &quot;**/*.css, **/*.html&quot;
</code></pre><p><img src="http://o743aqnrb.bkt.clouddn.com/20161019/brower-sync.png" alt=""></p>
<h2 id="u4F7F_u7528Python"><a href="#u4F7F_u7528Python" class="headerlink" title="使用Python"></a>使用Python</h2><p>如果你安装了Python，那这个方法可能最简便了，只需要在该目录下执行命令:</p>
<pre><code>python -m SimpleHTTPServer
</code></pre><p>这样就启动了一个静态web服务器，此时项目的根目录为执行命令时所在目录，默认端口是8000，如果需要指定端口，则加上端口号启动：</p>
<pre><code>python -m SimpleHTTPServer 8080
</code></pre><p><img src="http://o743aqnrb.bkt.clouddn.com/20161019/python-http-server-1.png" alt=""></p>
<a id="more"></a>
<h2 id="u4F7F_u7528http-server"><a href="#u4F7F_u7528http-server" class="headerlink" title="使用http-server"></a>使用http-server</h2><p>如果你安装了node，那么<code>http-server</code>也是个不错的选择，只需要一行命令就可以快速启动。<br>安装：</p>
<pre><code>npm install -g http-server
</code></pre><p>在项目根目录执行：</p>
<pre><code>http-server -a 127.0.0.1 -p 8000
</code></pre><p><img src="http://o743aqnrb.bkt.clouddn.com/20161019/http-server.png" alt=""></p>
<h2 id="u4F7F_u7528static-server"><a href="#u4F7F_u7528static-server" class="headerlink" title="使用static-server"></a>使用static-server</h2><p><code>static-server</code>很类似<code>http-server</code>，也是基于node，安装和使用方法很相似：</p>
<pre><code>npm install -g static-server
</code></pre><p>使用时只需要在项目目录下指定该项目的入口文件即可：</p>
<pre><code>static-server -i index.html
</code></pre><p><img src="http://o743aqnrb.bkt.clouddn.com/20161019/static-server-1.png" alt=""></p>
<p>下面是一些常用的选项：</p>
<blockquote>
<p>-p, –port <n>             指定端口启动<br>-i, –index <filename>       指定默认项目入口文件<br>-d, –debug                  显示错误信息<br>-n, –not-found <filename>   指定404页面</filename></filename></n></p>
</blockquote>
<p>详见：<a href="https://www.npmjs.com/package/static-server" target="_blank" rel="external">https://www.npmjs.com/package/static-server</a></p>
<h2 id="u4F7F_u7528Ruby"><a href="#u4F7F_u7528Ruby" class="headerlink" title="使用Ruby"></a>使用Ruby</h2><p>如果你安装Ruby，Ruby也提供了一个很简便的方式：</p>
<pre><code>ruby -run -e httpd . -p 8888
</code></pre><p><img src="http://o743aqnrb.bkt.clouddn.com/20161019/ruby-http-server.png" alt=""></p>
<h2 id="u4F7F_u7528Nginx"><a href="#u4F7F_u7528Nginx" class="headerlink" title="使用Nginx"></a>使用Nginx</h2><p>几乎所有的web应用在最终部署到<code>Linux</code>上时都会用到<code>Nginx</code>做反向代理服务器，所以很有必要会用<code>Nginx</code>。<br><a href="http://nginx.org/en/download.html" target="_blank" rel="external">下载</a>，解压，运行nginx.exe，在浏览器输入<code>localhost</code>或<code>127.0.0.1</code>，如果出现<br><strong>Welcome to nginx!</strong><br>则说明<code>Nginx</code>已经成功安装。</p>
<p>下面是<code>Nginx</code>常用到的命令：</p>
<pre><code>nginx -s reload                // 重新加载nginx配置
nginx -s stop
</code></pre><p>如果你的需求只是实现静态资源服务，那么只需要如下简单配置即可：root代表项目的根目录，index代表默认的入口文件。</p>
<pre><code>server {
    listen       80;
    server_name  localhost;

    location / {
        root   E:\Work\Workspace;
        index  index.html index.htm;
    }

    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   html;
    }
}
</code></pre><p>这时候访问 <a href="http://localhost/index.html" target="_blank" rel="external">http://localhost/index.html</a> 就OK了。</p>
<h2 id="u4F7F_u7528json-server"><a href="#u4F7F_u7528json-server" class="headerlink" title="使用json-server"></a>使用json-server</h2><p>如果你的需求只是想模拟<code>ajax</code>从后台获取数据，因为通常一个项目中前端开发和后台几乎是同时进行的，开发初期往往需要前端自己构造假数据来渲染页面，谷歌浏览器不在服务端环境下调试js，则会被视为跨域，从而导致无法获取本地<code>json</code>数据，要不就使用火狐浏览器，较好的解决方法是快速搭建一个JSON服务器,这个时候<a href="https://github.com/typicode/json-server" target="_blank" rel="external">json-server</a>就是个不错的选择了。</p>
<p>安装：</p>
<pre><code>npm install -g json-server
</code></pre><p>在任意文件夹下创建一个<code>json</code>文件：如data.json:</p>
<pre><code class="json">{
  &quot;posts&quot;: [
    { &quot;id&quot;: 1, &quot;title&quot;: &quot;json-server&quot;, &quot;author&quot;: &quot;typicode&quot; }
  ],
  &quot;comments&quot;: [
    { &quot;id&quot;: 1, &quot;body&quot;: &quot;some comment&quot;, &quot;postId&quot;: 1 },
    { &quot;id&quot;: 2, &quot;body&quot;: &quot;some comment&quot;, &quot;postId&quot;: 1 }
  ],
  &quot;profile&quot;: { &quot;name&quot;: &quot;typicode&quot; }
}
</code></pre>
<p>在该目录下启动<code>json-server</code>来监听这个文件:</p>
<pre><code>json-server --watch data.json

# 或者指定端口启动启动
json-server --watch data.json --port 3004
</code></pre><p><img src="http://o743aqnrb.bkt.clouddn.com/20161019/json-server-1.png" alt=""></p>
<p>可以看到<code>json-server</code>默认创建了三个请求资源，分别对应了<code>data.json</code>中的<code>key</code>值，很方便，这个时候浏览器访问localhostL3000/db 就会看到当前<code>data.json</code>的数据了。<br><img src="http://o743aqnrb.bkt.clouddn.com/20161019/json-server-2.png" alt=""></p>
<p>访问<a href="http://localhost:3000/comments/1" target="_blank" rel="external">http://localhost:3000/comments/1</a> ，则可以获取到comments下id为1的json数据：<br><img src="http://o743aqnrb.bkt.clouddn.com/20161019/json-server-3.png" alt=""></p>
<p>很神奇是吧，有了数据之后，可以让<code>json-server</code>也作为静态资源的服务器，这样就没有跨域问题了。<br><code>json-server</code>默认的静态资源（HTML,CSS,JS等）是在与json数据文件同级目录下的public文件夹中，你只需要创建一个名为<code>public</code>的文件夹，把静态资源放到<code>public</code>目录下，然后直接运行以下命令启动即可：</p>
<pre><code>json-server data.json
</code></pre><p>假如我们需要指定静态资源文件夹的位置，则可以通过指定目录来启动<code>json-server</code>即可，如指定静态资源为json数据同级目录的source文件夹下，则：</p>
<pre><code>json-server data.json --static ./source
</code></pre><p>这样，访问<a href="http://localhost:3000/index.html" target="_blank" rel="external">http://localhost:3000/index.html</a> 就可以成功加载到json数据了。<br><img src="http://o743aqnrb.bkt.clouddn.com/20161019/json-server-4.png" alt=""></p>
<p><code>json-server</code>还有很多更强大的功能，如支持模拟REST API操作等，更多的功能可以到<a href="https://github.com/typicode/json-server/blob/master/README.md" target="_blank" rel="external">json-server项目文档</a>查看。</p>
<h2 id="u4F7F_u7528_u4E00_u4E9BIDE"><a href="#u4F7F_u7528_u4E00_u4E9BIDE" class="headerlink" title="使用一些IDE"></a>使用一些IDE</h2><p>例如：HBuilder</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>前端开发中，经常遇到有些场景需要用到服务器环境，例如AngularJS中的路由，或者是模拟ajax获取数据等需求时，这个时候并不需要考虑到服务端逻辑，只是搭建简单的静态资源服务，因此解决方法有很多，下面介绍几种简单快捷的常用方式：</p>
<h2 id="u4F7F_u7528browser-sync"><a href="#u4F7F_u7528browser-sync" class="headerlink" title="使用browser-sync"></a>使用browser-sync</h2><p><a href="https://www.browsersync.io/">browser-sync</a>，非常棒的工具，最吸引人的是它的监控和同步功能，体验非常好，可以不用一直f5刷新浏览器即可实时看到修改了的变化。只要在同个局域网，还可以在手机上也同步看到变化，不需要手动刷新，非常适合移动端调试，很推荐使用。<br>安装：</p>
<pre><code>npm install -g browser-sync
</code></pre><p>在项目根目录执行：</p>
<pre><code>browser-sync start --server --files &quot;css/*.css&quot;
# 也可以配置多项，或者通配符匹配任意目录
browser-sync start --server --files &quot;**/*.css, **/*.html&quot;
</code></pre><p><img src="http://o743aqnrb.bkt.clouddn.com/20161019/brower-sync.png" alt=""></p>
<h2 id="u4F7F_u7528Python"><a href="#u4F7F_u7528Python" class="headerlink" title="使用Python"></a>使用Python</h2><p>如果你安装了Python，那这个方法可能最简便了，只需要在该目录下执行命令:</p>
<pre><code>python -m SimpleHTTPServer
</code></pre><p>这样就启动了一个静态web服务器，此时项目的根目录为执行命令时所在目录，默认端口是8000，如果需要指定端口，则加上端口号启动：</p>
<pre><code>python -m SimpleHTTPServer 8080
</code></pre><p><img src="http://o743aqnrb.bkt.clouddn.com/20161019/python-http-server-1.png" alt=""></p>]]>
    
    </summary>
    
      <category term="前端" scheme="http://chuiliu.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="开发工具" scheme="http://chuiliu.github.io/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
      <category term="前端" scheme="http://chuiliu.github.io/categories/fe/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[理解 AngularJS 中的 ng-options]]></title>
    <link href="http://chuiliu.github.io/2016/10/13/%E7%90%86%E8%A7%A3AngularJS%E4%B8%AD%E7%9A%84ng-options/"/>
    <id>http://chuiliu.github.io/2016/10/13/理解AngularJS中的ng-options/</id>
    <published>2016-10-12T16:19:47.000Z</published>
    <updated>2016-12-04T09:04:27.068Z</updated>
    <content type="html"><![CDATA[<p>用 AngularJS 实现下拉列表，我们可能很快地想到使用<code>ngRepeat</code>指令来实现，AngularJS 提供了另一种更灵活的方式——<code>ngOptions</code>，使用<code>ngOptions</code>指令可以很方便地将数组或者对象数据渲染到下拉列表的option元素中，它优于<code>ngRepeat</code>主要是在于它的实现会占用更少的内存资源，它在每次循环中不会创建新的作用域。</p>
<ul>
<li>支持两种格式的数据，数组和对象</li>
</ul>
<a id="more"></a>
]]></content>
    <summary type="html">
    <![CDATA[<p>用 AngularJS 实现下拉列表，我们可能很快地想到使用<code>ngRepeat</code>指令来实现，AngularJS 提供了另一种更灵活的方式——<code>ngOptions</code>，使用<code>ngOptions</code>指令可以很方便地将数组或者对象数据渲染到下拉列表的option元素中，它优于<code>ngRepeat</code>主要是在于它的实现会占用更少的内存资源，它在每次循环中不会创建新的作用域。</p>
<ul>
<li>支持两种格式的数据，数组和对象</li>
</ul>]]>
    
    </summary>
    
      <category term="AngularJS" scheme="http://chuiliu.github.io/tags/AngularJS/"/>
    
      <category term="Javascript" scheme="http://chuiliu.github.io/tags/Javascript/"/>
    
      <category term="前端" scheme="http://chuiliu.github.io/categories/fe/"/>
    
      <category term="AngularJS" scheme="http://chuiliu.github.io/categories/fe/AngularJS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[解决MySQL因max_allowed_packet的值设置过小而查询失败的问题]]></title>
    <link href="http://chuiliu.github.io/2016/10/11/%E8%A7%A3%E5%86%B3MySQL%E5%9B%A0max-allowed-packet%E7%9A%84%E5%80%BC%E8%AE%BE%E7%BD%AE%E8%BF%87%E5%B0%8F%E8%80%8C%E6%9F%A5%E8%AF%A2%E5%A4%B1%E8%B4%A5%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://chuiliu.github.io/2016/10/11/解决MySQL因max-allowed-packet的值设置过小而查询失败的问题/</id>
    <published>2016-10-11T14:22:02.000Z</published>
    <updated>2016-11-28T15:37:50.753Z</updated>
    <content type="html"><![CDATA[<p>在MySQL中，Client和Server通信时可接收数据包的大小是受限制的，这个限制值为<code>max_allowed_packet</code>，通信的最小单位就是packet，当Server接收的数据包大小超过了MySQL配置文件中<code>max_allowed_packet</code>的限制值时，对数据库的读写操作则会失败。</p>
<p>那么如何修改这个值的大小。首先，我们可以通过这个命令先查看当前<code>max_allowed_packet</code>值的大小：</p>
<pre><code>SHOW VARIABLES LIKE &#39;%max_allowed_packet%&#39;;
</code></pre><h3 id="u65B9_u6CD5_u4E00_uFF1A_u4F7F_u7528_u547D_u4EE4_u4FEE_u6539"><a href="#u65B9_u6CD5_u4E00_uFF1A_u4F7F_u7528_u547D_u4EE4_u4FEE_u6539" class="headerlink" title="方法一：使用命令修改"></a>方法一：使用命令修改</h3><p>可以通过命令修改<code>max_allowed_packet</code>的值，然后通过重启MySQL服务来使命令生效，具体方法如下：<br>修改值大小</p>
<pre><code class="sql">set global max_allowed_packet = 1024*1024*10
</code></pre>
<p>重启数据库</p>
<pre><code>service mysql restart
</code></pre><h3 id="u65B9_u6CD5_u4E8C_uFF1A_u4FEE_u6539_u914D_u7F6E_u6587_u4EF6"><a href="#u65B9_u6CD5_u4E8C_uFF1A_u4FEE_u6539_u914D_u7F6E_u6587_u4EF6" class="headerlink" title="方法二：修改配置文件"></a>方法二：修改配置文件</h3><p>通过修改MySQL的配置文件也可以修改该值：<br>查找配置文件的路径</p>
<pre><code>mysql --help | grep my.cnf
</code></pre><p>找到配置文件后切换到该路径用vim打开，找到并直接修改其值即可：</p>
<pre><code>max_allowed_packet = 10M
</code></pre><p><strong>PS：</strong>前段时间经常遇到<code>max_allowed_packet</code>的值隔好几天就又被重置为1M的情况，查找了很久没有找具体的原因，谷歌和百度了不少都说是遭到黑客攻击之类的，因此按大家推荐的方法把数据库的用户和密码都做修改，修改过后这段时间也没再出现过这个问题，建议大家不要使用太简单的密码。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在MySQL中，Client和Server通信时可接收数据包的大小是受限制的，这个限制值为<code>max_allowed_packet</code>，通信的最小单位就是packet，当Server接收的数据包大小超过了MySQL配置文件中<code>max_allowe]]>
    </summary>
    
      <category term="MySQL" scheme="http://chuiliu.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[解决HTTPS方式下GIT推送到远程分支每次都要重新输入用户名密码]]></title>
    <link href="http://chuiliu.github.io/2016/10/11/%E8%A7%A3%E5%86%B3GIT%E6%8E%A8%E9%80%81%E5%88%B0%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF%E6%AF%8F%E6%AC%A1%E9%83%BD%E8%A6%81%E9%87%8D%E6%96%B0%E8%BE%93%E5%85%A5%E7%94%A8%E6%88%B7%E5%90%8D%E5%AF%86%E7%A0%81/"/>
    <id>http://chuiliu.github.io/2016/10/11/解决GIT推送到远程分支每次都要重新输入用户名密码/</id>
    <published>2016-10-11T14:09:34.000Z</published>
    <updated>2016-12-02T09:09:31.642Z</updated>
    <content type="html"><![CDATA[<p>最近因换了硬盘，重新克隆Git项目到本地，因为使用的是HTTPS方式克隆的，在每次推送代码到Coding上时发现都要输入username和password，除非改成SSH方式，不然很不方便。</p>
<p>经过一番尝试，找到了解决方法：</p>
<ol>
<li>在克隆项目时加上用户名和密码信息，这样以后这个项目的推送就不需要再输用户名密码：<pre><code>git clone https://username:password@git.coding.net/username/Demo.git
</code></pre></li>
</ol>
<p>如果当前项目已经存在，不想再重新克隆，则可以先删除本来的主机名再重新配置远程仓库即可：</p>
<pre><code>git remote rm origin
git remote add origin https://username:password@git.coding.net/username/Demo.git
</code></pre><p>这种方式虽然挺好，但是只是解决了当前项目的推送问题，并没有全局生效，如果是另外克隆的其它项目，则也需要在克隆时带上用户名和密码才会生效。另外需要注意的是，这样做会导致在<code>./.git/config</code>文件中可以直接看到明文密码，个人认为不太安全，因此还是建议大家使用配置SSH公钥的方式，即方便、好管理又安全。</p>
<pre><code>[remote &quot;origin&quot;]
    url = https://username:password@git.coding.net/username/Demo.git
    fetch = +refs/heads/*:refs/remotes/origin/*
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<p>最近因换了硬盘，重新克隆Git项目到本地，因为使用的是HTTPS方式克隆的，在每次推送代码到Coding上时发现都要输入username和password，除非改成SSH方式，不然很不方便。</p>
<p>经过一番尝试，找到了解决方法：</p>
<ol>
<li>在克隆项目]]>
    </summary>
    
      <category term="Git" scheme="http://chuiliu.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[AngularJS 什么时候用$apply]]></title>
    <link href="http://chuiliu.github.io/2016/10/08/AngularJS%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E7%94%A8-apply/"/>
    <id>http://chuiliu.github.io/2016/10/08/AngularJS什么时候用-apply/</id>
    <published>2016-10-08T13:29:20.000Z</published>
    <updated>2016-12-04T13:06:31.249Z</updated>
    <content type="html"><![CDATA[<p>写AngularJS代码时会时常发现，有时候明明数据模型更新了但是页面视图层并没有更新，然后只要在代码里加上一句<code>$scope.$apply()</code>，视图就更新了。以前总是不清楚什么时候该用，现在清晰了，记录一下。</p>
<p>其实总结一句就是：<strong>DOM监听事件处理程序中的代码，外部的回调函数（例如<code>setTimeout()</code>,<code>setInterval()</code>）中的代码等不在Angular执行上下文中的代码，如果有修改到Angular数据模型时，则必须由我们手动调用<code>$apply()</code>来获得视图层的更新。<code>$apply</code>方法将会调用一个digest循环来更新整个视图层。</strong></p>
<p><strong><code>$apply()</code>必须在该调用的时候调用</strong>，在我们使用AngularJS的提供的指令或服务，如<code>ng-click</code>、<code>$timeout</code>等来处理数据模型时，Angluar会自动调用<code>$scope.$apply()</code>，如果再手动调用是会报错的。</p>
<p>例如，假设我们不使用Angular提供的<code>$timeout</code>服务，而使用原生的<code>setTimeout()</code>，则这个时候必须用<code>$apply()</code>才能使得数据更新。</p>
<p><strong>比较好的写法是将涉及数据模型改变的代码写在<code>$scope.$apply()</code>里面</strong>，而不是执行完代码后再调用一次<code>$scope.$apply()</code>。传递给<code>$scope.$apply()</code>执行，Angular才会对这段代码做异常处理。</p>
<pre><code>angular.module(&#39;myModule&#39;, []).controller(&#39;MyController&#39;, function($scope) {
    $scope.updateTime = function() {
        setTimeout(function() {
            $scope.$apply(function() {
                $scope.timestamp = new Date().getTime();
            });
        }, 1000);
    };
});
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<p>写AngularJS代码时会时常发现，有时候明明数据模型更新了但是页面视图层并没有更新，然后只要在代码里加上一句<code>$scope.$apply()</code>，视图就更新了。以前总是不清楚什么时候该用，现在清晰了，记录一下。</p>
<p>其实总结一句就是：<st]]>
    </summary>
    
      <category term="AngularJS" scheme="http://chuiliu.github.io/tags/AngularJS/"/>
    
      <category term="Javascript" scheme="http://chuiliu.github.io/tags/Javascript/"/>
    
      <category term="前端" scheme="http://chuiliu.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="前端" scheme="http://chuiliu.github.io/categories/fe/"/>
    
      <category term="AngularJS" scheme="http://chuiliu.github.io/categories/fe/AngularJS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[理解浏览器同源策略与跨域的解决方案]]></title>
    <link href="http://chuiliu.github.io/2016/09/28/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5/"/>
    <id>http://chuiliu.github.io/2016/09/28/浏览器同源策略/</id>
    <published>2016-09-28T01:38:08.000Z</published>
    <updated>2016-11-27T14:37:36.644Z</updated>
    <content type="html"><![CDATA[<p>开发中涉及到一些跨域问题，从而对同源策略有更深的理解，同源策略是保证Web浏览器安全中最基本的安全功能，无论是前端还是后端，如果对同源策略不了解很容易导致一些开发上的难题。</p>
<h2 id="u540C_u6E90_u7B56_u7565"><a href="#u540C_u6E90_u7B56_u7565" class="headerlink" title="同源策略"></a>同源策略</h2><p>对Javascript来说，满足同源策略可以简单理解为下面的三项必须完全相同：</p>
<ul>
<li>协议相同</li>
<li>域名相同</li>
<li>端口相同</li>
</ul>
<p>也就是说，只要两个URL中的协议、域名或端口存在任何一项不同，则被浏览器视为是不同源的。<br>举个例子，下列与<code>http://test.example.com/page1/index.html</code>的同源情况</p>
<blockquote>
<p><a href="http://test.example.com/page2/index.html" target="_blank" rel="external">http://test.example.com/page2/index.html</a>  # 同源<br><a href="https://test.example.com/page1/index.html" target="_blank" rel="external">https://test.example.com/page1/index.html</a>  # 不同源，协议不同<br><a href="http://demo.example.com/page1/index.html" target="_blank" rel="external">http://demo.example.com/page1/index.html</a>  # 不同源，域名不同<br><a href="http://test.example.com:3000/page1/index.html" target="_blank" rel="external">http://test.example.com:3000/page1/index.html</a>  # 不同源，端口不同</p>
</blockquote>
<p>注意：<code>http://127.0.0.1:8080/index.html</code> 和 <code>http://localhost:8080/index.html</code> 当然也是不同源的</p>
<p>HTML中的<code>&lt;link&gt;</code>，<code>&lt;img&gt;</code>，<code>&lt;script&gt;</code>，<code>&lt;iframe&gt;</code>等标签都可以跨域加载资源，它们实际上是发送了一次GET请求，而在Javascript中，浏览器不允许脚本行为的跨域，也就是由<code>XMLHttpRequest</code>发起HTTP的请求会受到同源策略的限制。所以当需要由<code>AJAX</code>跨域加载资源时，就会涉及到跨域的处理。</p>
<p>跨域的处理通常有以下两种常用的解决方案。</p>
<h2 id="CORS_u8DE8_u57DF"><a href="#CORS_u8DE8_u57DF" class="headerlink" title="CORS跨域"></a>CORS跨域</h2><p><code>CORS</code>跨域需要后端的解决，其主要原理是由服务端来授权控制谁可以跨域获取资源，这是一种比较安全的解决方案。</p>
<h4 id="Access-Control-Allow-Origin"><a href="#Access-Control-Allow-Origin" class="headerlink" title="Access-Control-Allow-Origin"></a>Access-Control-Allow-Origin</h4><p>服务端返回的响应头应该在<code>Access-Control-Allow-Origin</code>中设置允许接受请求的域，例如这样设置</p>
<pre><code>// 表示允许来自所有站点的跨域请求
Access-Control-Allow-Origin: *

// 表示仅允许来自http://localhost:8000的跨域请求
Access-Control-Allow-Origin: http://localhost:8000
</code></pre><p><img src="http://o743aqnrb.bkt.clouddn.com/20160928/%E8%B7%A8%E5%9F%9F1.png" alt=""></p>
<h4 id="OPTIONS_u9884_u8BF7_u6C42"><a href="#OPTIONS_u9884_u8BF7_u6C42" class="headerlink" title="OPTIONS预请求"></a>OPTIONS预请求</h4><p>当一个HTTP请求不是一个简单请求时，浏览器有一个预请求的过程，也就是发送一个<code>OPTIONS</code>请求，浏览器会预先发送一个<code>OPTIOMS</code>请求给目的站点，去探测目的站点是否允许来自这个源的站点跨域，这个过程是浏览器自行判断并发起的，不需要我们来写，除了GET请求、HEAD请求、没有传参的POST请求和以表单提交方式发出的POST请求外，其它的任何HTTP请求都会发出预请求去探测是否可以继续。</p>
<p><img src="http://o743aqnrb.bkt.clouddn.com/20160928/%E8%B7%A8%E5%9F%9F4.png" alt="OPTION请求"><br><img src="http://o743aqnrb.bkt.clouddn.com/20160928/%E8%B7%A8%E5%9F%9F5.png" alt="POST请求"></p>
<h4 id="Access-Control-Allow-Credentials"><a href="#Access-Control-Allow-Credentials" class="headerlink" title="Access-Control-Allow-Credentials"></a>Access-Control-Allow-Credentials</h4><p>如果是跨域并携带<code>cookie</code>的通信则要注意了，当<code>XMLHttpRequest</code>对象实例中<code>withCredentials</code>属性为<code>true</code>的情况下，服务端还必须设置<code>Access-Control-Allow-Credentials:true</code>来确定是否接受<code>cookie</code>，如果没有设置这个值，尽管客户端发送了<code>cookie</code>值过来，服务端也会忽略，并且请求失败。</p>
<p>需要特别注意的是，如果此时响应头中<code>Access-Control-Allow-Origin</code>的值是<code>*</code>，此时请求还是会失败的，因为在带有<code>cookie</code>的HTTP请求中，<code>Access-Control-Allow-Origin</code>的值不能用<code>*</code>号通配符，只能设置具体的域名。否则Chrome会报如下错误：</p>
<p><img src="http://o743aqnrb.bkt.clouddn.com/20160928/%E8%B7%A8%E5%9F%9F2.png" alt=""></p>
<p>因此只有对于一个不带有<code>credentials</code>的跨域请求，<code>Access-Control-Allow-Origin</code>才可以指定为<code>*</code>，表示允许来自所有域的请求。</p>
<h4 id="Access-Control-Max-Age"><a href="#Access-Control-Max-Age" class="headerlink" title="Access-Control-Max-Age"></a>Access-Control-Max-Age</h4><p>响应头还可以设置<code>Access-Control-Max-Age</code>来告诉客户端这一次预请求的有效期，在有效期内再次跨域访问，浏览器不会预先发送预请求直到时间失效</p>
<pre><code>Access-Control-Max-Age: 864000  # 单位是秒，表示10天内，浏览器对于该域的跨域请求，不需要再发送预请求
</code></pre><h4 id="Access-Control-Allow-Headers"><a href="#Access-Control-Allow-Headers" class="headerlink" title="Access-Control-Allow-Headers"></a>Access-Control-Allow-Headers</h4><p>在会发出预请求的情况下必须配置，指明可以自定义的请求头</p>
<pre><code>Access-Control-Allow-Headers: Content-Type
</code></pre><p>如果POST请求需要传<code>JSON</code>格式的参数，前端设置了<code>&#39;Content-Type&#39;, &#39;application/json&#39;</code>，则服务端必须设置<code>Access-Control-Allow-Headers</code>，否则也不成功，Chrome会报下面的错：</p>
<p><img src="http://o743aqnrb.bkt.clouddn.com/20160928/%E8%B7%A8%E5%9F%9F3.png" alt=""></p>
<h4 id="Access-Control-Allow-Methods"><a href="#Access-Control-Allow-Methods" class="headerlink" title="Access-Control-Allow-Methods"></a>Access-Control-Allow-Methods</h4><p>表示允许的请求方式，可以配置多个值</p>
<pre><code>Access-Control-Allow-Methods: POST, GET, OPTION, PUT, DELETE
</code></pre><p><code>CORS</code>方式可以灵活可控地解决跨域问题，并且支持所有类型的HTTP请求，但是它存在一定的局限性，这种方式的兼容性差，只支持IE9+，不过很适合用于移动端。</p>
<ul>
<li>前端代码：</li>
</ul>
<pre><code class="javascript">var xhr = new XMLHttpRequest();
var postData = {
    name: &#39;lonica&#39;,
    email: &#39;test@126.com&#39;
};
xhr.open(&#39;POST&#39;, &#39;http://127.0.0.1:3001/&#39;, true);
xhr.setRequestHeader(&#39;Content-Type&#39;, &#39;application/json&#39;);
xhr.withCredentials = true;
xhr.onreadystatechange = function() {
    if (xhr.readyState == 4 &amp;&amp; xhr.status == 200) {
        console.log(JSON.parse(xhr.responseText));
    }
};
xhr.send(JSON.stringify(postData));
</code></pre>
<ul>
<li>服务端代码：</li>
</ul>
<pre><code>var http = require(&#39;http&#39;);

http.createServer(function(req, res) {
    var data = {
        name: &#39;lonica&#39;
    };
    res.writeHead(200, {
        &#39;Content-Type&#39; : &#39;text/plain&#39;,
        &#39;Access-Control-Allow-Origin&#39; : &#39;http://localhost:8000&#39;,
        &#39;Access-Control-Allow-Methods&#39; : &#39;GET, POST, OPTIONS, PUT, DELETE, HEAD&#39;,
        &#39;Access-Control-Allow-Credentials&#39; : true,
        &#39;Access-Control-Allow-Headers&#39; : &#39;Content-Type&#39;,
        &#39;Access-Control-Max-Age&#39; : &#39;3600&#39;
    });
    res.end(JSON.stringify(data));
}).listen(3001);
</code></pre><h2 id="JSONP_u8DE8_u57DF"><a href="#JSONP_u8DE8_u57DF" class="headerlink" title="JSONP跨域"></a>JSONP跨域</h2><p><code>JSONP</code>是<code>JSON with Padding</code>的简称，这种方式的兼容性好，但是只能处理GET请求的跨域，使用的时候需要特别注意。</p>
<p>我们都知道，浏览器不允许使用<code>XMLHttpRequest</code>脚本去获取不同域的数据，但是可以通过<code>&lt;script&gt;</code>，<code>&lt;link&gt;</code>，<code>&lt;img&gt;</code>等标签来发起GET请求来获取数据，<code>JSONP</code>就是利用了这个原理，所以也不难理解<code>JSONP</code>为什么只能支持GET请求了。</p>
<p><code>JSONP</code>的原理：利用<code>&lt;script&gt;</code>标签去获取一段<code>javascript</code>代码，这段<code>javascript</code>代码的内容（由服务端拼接）包含了一个方法的调用，调用方法时所传入的参数就是前端要拿到的数据，前端只需要在这个方法的实现里面处理传入的数据即可，<code>JSONP</code>需要前后端一起配合，确定方法名由前端传参给后端，并由后端拼接成调用方法的语句再返回给前端。</p>
<ul>
<li>前端代码</li>
</ul>
<pre><code class="html">&lt;script type=&quot;text/javascript&quot;&gt;
    function callback(data) {
        // 获取到的数据
        console.log(data);
    }

    var ele = document.createElement(&#39;script&#39;);
    ele.type = &#39;text/javascript&#39;;
    ele.src = &#39;http://127.0.0.1:3000?callback=callback&#39;;
    document.body.appendChild(ele);

&lt;/script&gt;
</code></pre>
<ul>
<li>后端代码实现：</li>
</ul>
<pre><code class="javascript">var http = require(&#39;http&#39;);
var url = require(&#39;url&#39;);

http.createServer(function(req, res) {
    var params = url.parse(req.url, true).query;
    var func = params.callback;
    var data = {
        tags: [&#39;jsonp&#39;, &#39;javascript&#39;]
    };
    res.writeHead(200, {&#39;Content-Type&#39; : &#39;text/plain&#39;});
    res.end(func + &#39;(&#39; + JSON.stringify(data) +&#39;)&#39;);
}).listen(3000);
</code></pre>
]]></content>
    <summary type="html">
    <![CDATA[<p>开发中涉及到一些跨域问题，从而对同源策略有更深的理解，同源策略是保证Web浏览器安全中最基本的安全功能，无论是前端还是后端，如果对同源策略不了解很容易导致一些开发上的难题。</p>
<h2 id="u540C_u6E90_u7B56_u7565"><a href="#u54]]>
    </summary>
    
      <category term="前端" scheme="http://chuiliu.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="跨域" scheme="http://chuiliu.github.io/tags/%E8%B7%A8%E5%9F%9F/"/>
    
      <category term="前端" scheme="http://chuiliu.github.io/categories/fe/"/>
    
      <category term="Javascript" scheme="http://chuiliu.github.io/categories/fe/Javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Redis 使用笔记（二）]]></title>
    <link href="http://chuiliu.github.io/2016/09/27/redis%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B02/"/>
    <id>http://chuiliu.github.io/2016/09/27/redis使用笔记2/</id>
    <published>2016-09-27T14:26:56.000Z</published>
    <updated>2016-12-02T16:46:49.979Z</updated>
    <content type="html"><![CDATA[<p>Redis可以支持存储不同格式的数据，Redis是一个数据结构服务器，它不是简单的key-value存储，以下是可以作为存储的类型：</p>
<ul>
<li>二进制安全的字符串</li>
<li>列表（Lists），按顺序插入的字符串元素的集合</li>
<li>集合（Sets），是不重复的并且无序的<a id="more"></a></li>
<li>有序集合（Sorted sets），每个字符串元素都关联到一个叫score浮动数值（floating number value）。里面的元素总是通过score进行排序</li>
<li>哈希（Hashes），由字段（field）及其关联的值（value）组成的映射</li>
<li>Bit arrays</li>
<li>HyperLogLogs</li>
</ul>
<p>可以使用<code>redis-cli</code>命令启动客户端，连接到redis服务器，来实践一下redis的使用：</p>
<h2 id="u5B57_u7B26_u4E32_uFF08Strings_uFF09"><a href="#u5B57_u7B26_u4E32_uFF08Strings_uFF09" class="headerlink" title="字符串（Strings）"></a>字符串（Strings）</h2><p>在一条命令中同时查询或赋值多个键</p>
<ul>
<li>mset 返回数组</li>
<li>mget </li>
</ul>
<pre><code>mset a 1 b 2 c 3
mget a b c
</code></pre><p>判断键是否存在</p>
<ul>
<li>exists 存在返回0，不存在返回1</li>
</ul>
<pre><code>exists a
</code></pre><p>删除键</p>
<ul>
<li>del 存在则返回1，不存在返回0</li>
</ul>
<p>返回某个键的类型</p>
<ul>
<li>type 不存在则返回none</li>
</ul>
<pre><code>type testList
</code></pre><h2 id="u8BBE_u7F6E_u548C_u67E5_u8BE2_u8FC7_u671F_u65F6_u95F4_uFF08expires_uFF09"><a href="#u8BBE_u7F6E_u548C_u67E5_u8BE2_u8FC7_u671F_u65F6_u95F4_uFF08expires_uFF09" class="headerlink" title="设置和查询过期时间（expires）"></a>设置和查询过期时间（expires）</h2><ul>
<li><p>expire </p>
<pre><code>127.0.0.1:6379&gt; set key uuuuuuu
OK
127.0.0.1:6379&gt; expire key 5
(integer) 1
127.0.0.1:6379&gt; get key
&quot;uuuuuuu&quot;
127.0.0.1:6379&gt; get key
(nil)
</code></pre></li>
<li><p>ttl 查询距离过期的剩余时间</p>
<pre><code>127.0.0.1:6379&gt; set key 100 ex 10
OK
127.0.0.1:6379&gt; ttl key
(integer) 6
127.0.0.1:6379&gt; ttl key
(integer) 2
127.0.0.1:6379&gt; ttl key
(integer) -2
</code></pre></li>
</ul>
<h2 id="u5217_u8868_uFF08Lists_uFF09"><a href="#u5217_u8868_uFF08Lists_uFF09" class="headerlink" title="列表（Lists）"></a>列表（Lists）</h2><ul>
<li>lpush 从头部添加元素</li>
<li>rpush 从尾部添加元素</li>
<li>lrange 查询某个范围内的元素，索引从0开始，-1表示最后一个元素，-2表示倒数第二个元素，以此类推</li>
<li>lpop 从头部移除元素</li>
<li>rpop 从尾部移除元素</li>
<li>ltrim 截取某个范围内的元素，并将结果赋值给该列表</li>
</ul>
<pre><code>lpush testList b
lpush testList a
rpush testList c
lrange testList 0 3
lpop testList
rpop testList
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<p>Redis可以支持存储不同格式的数据，Redis是一个数据结构服务器，它不是简单的key-value存储，以下是可以作为存储的类型：</p>
<ul>
<li>二进制安全的字符串</li>
<li>列表（Lists），按顺序插入的字符串元素的集合</li>
<li>集合（Sets），是不重复的并且无序的]]>
    
    </summary>
    
      <category term="Redis" scheme="http://chuiliu.github.io/tags/Redis/"/>
    
      <category term="Redis" scheme="http://chuiliu.github.io/categories/Redis/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Maven 添加本地依赖包]]></title>
    <link href="http://chuiliu.github.io/2016/09/01/Maven%E6%B7%BB%E5%8A%A0%E5%A4%96%E9%83%A8%E4%BE%9D%E8%B5%96%E5%8C%85/"/>
    <id>http://chuiliu.github.io/2016/09/01/Maven添加外部依赖包/</id>
    <published>2016-09-01T05:48:53.000Z</published>
    <updated>2016-09-26T15:47:32.870Z</updated>
    <content type="html"><![CDATA[<p>在实际项目开发中，项目使用到的jar包不一定来自Maven远程仓库，也可能来自本地的jar包，这时候也可以配置<code>pom.xml</code>添加本地包的依赖，具体配置如下：</p>
<pre><code class="xml">&lt;dependency&gt;
    &lt;groupId&gt;com.taobao.api&lt;/groupId&gt;
    &lt;artifactId&gt;com.taobao.api&lt;/artifactId&gt;
    &lt;version&gt;1.0.0&lt;/version&gt;
    &lt;scope&gt;system&lt;/scope&gt;
    &lt;systemPath&gt;${basedir}/src/main/java/WEB-INF/lib/taobao-sdk-java-auto_1455552377940-20160505.jar&lt;/systemPath&gt;
&lt;/dependency&gt;
</code></pre>
]]></content>
    <summary type="html">
    <![CDATA[<p>在实际项目开发中，项目使用到的jar包不一定来自Maven远程仓库，也可能来自本地的jar包，这时候也可以配置<code>pom.xml</code>添加本地包的依赖，具体配置如下：</p>
<pre><code class="xml">&lt;dependency&gt;]]>
    </summary>
    
      <category term="Java" scheme="http://chuiliu.github.io/tags/Java/"/>
    
      <category term="Maven" scheme="http://chuiliu.github.io/tags/Maven/"/>
    
      <category term="Java" scheme="http://chuiliu.github.io/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JHipster 中使用 Config Server]]></title>
    <link href="http://chuiliu.github.io/2016/08/31/JHipster%E4%B8%AD%E4%BD%BF%E7%94%A8Config%20Server/"/>
    <id>http://chuiliu.github.io/2016/08/31/JHipster中使用Config Server/</id>
    <published>2016-08-31T08:32:10.000Z</published>
    <updated>2016-09-26T15:57:15.356Z</updated>
    <content type="html"><![CDATA[<h3 id="JHipster_u4E2D_u4F7F_u7528Config_Server"><a href="#JHipster_u4E2D_u4F7F_u7528Config_Server" class="headerlink" title="JHipster中使用Config Server"></a>JHipster中使用Config Server</h3><p>JHipster中当启动一个微服务或者网关时，首先会连接到JHipster Registry去获取相应的配置信息，而微服务工程下的配置信息将被覆盖（只覆盖某个配置项的值，不会覆盖整个文件），可在<a href="http://localhost:8761/#/config" target="_blank" rel="external">http://localhost:8761/#/config</a>下查看各个微服务在JHipster Registry中的配置信息</p>
<ul>
<li>开发环境一般使用本地文件系统来保存</li>
<li>生产环境使用git仓库服务器上的配置</li>
</ul>
<p>保存配置文件的地址需要在<code>jhipster-registry</code>下的<code>application-dev.yml</code>中配置，配置如下：</p>
<pre><code class="python">spring:
    profiles:
        active: dev
        include: native
    cloud:
        config:
            server:
                native:
                     # 绝对路径配置：search-locations: file:///E:/config-repo
                     search-locations: file:./central-config
                git:
                    uri: https://github.com/chuiliu/config-repo
</code></pre>
<p>以上配置项说明：</p>
<ul>
<li><code>spring.profiles.active:dev</code>：使用开发环境的配置</li>
<li><code>spring.profiles.include:git</code>：使用本地文件系统的配置，如果要使用远程git仓库的配置，则需修改<code>spring.profiles.include</code>值为<code>git</code></li>
</ul>
<p>默认命名规则：<strong>{微服务名}[-dev|prod].yml</strong>，<br>此外，命名为<code>application[-dev|prod].yml</code>的配置文件将对所有注册到注册中心的微服务和网关起作用，可以在其中配置各个微服务所共有的信息。</p>
<p>例如：</p>
<blockquote>
<p>在名为gateway的网关的生产环境的配置文件应命名为：gateway-prod.yml<br>名为users的微服务的配置文件则命名为：users-prod.yml</p>
</blockquote>
<p>可在各个微服务项目下的<code>bootstrap[-dev|prod].yml</code>文件中修改以下配置项来定义配置文件名：</p>
<pre><code>spring:
    cloud:
        config:
            name: newFilename
</code></pre><ul>
<li>demo地址：<a href="https://github.com/chuiliu/jhipster-microservice-demo" target="_blank" rel="external">https://github.com/chuiliu/jhipster-microservice-demo</a></li>
<li>config server仓库地址：<a href="https://github.com/chuiliu/config-repo" target="_blank" rel="external">https://github.com/chuiliu/config-repo</a></li>
</ul>
<p>测试users微服务：</p>
<pre><code class="java">package com.mycompany.myapp.web.rest;

import io.swagger.annotations.Api;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.cloud.context.config.annotation.RefreshScope;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

/**
 * Created by Administrator on 2016/8/30.
 */
@RestController
@RequestMapping(&quot;/api&quot;)
@Api(value = &quot;/api&quot;, description = &quot;test&quot;, position = 1)
// 测试自动刷新配置
@ConfigurationProperties
public class testConfigResource {

    @Value(&quot;${testData.user.id:defaultValue}&quot;)
    private String id;

    @Value(&quot;${testData.user.name:defaultValue}&quot;)
    private String name;

    @Value(&quot;${testData.user.remark:defaultValue}&quot;)
    private String remark;

    @RequestMapping(value = &quot;test_id&quot;, method = RequestMethod.GET)
    public String testIntroduction() {
        return &quot;id：&quot; + id;
    }

    @RequestMapping(value = &quot;test_name&quot;, method = RequestMethod.GET)
    public String testName() {
        return &quot;name：&quot; + name;
    }

    @RequestMapping(value = &quot;test_remark&quot;, method = RequestMethod.GET)
    public String testRemark() {
        return &quot;remark：&quot; + remark;
    }
}
</code></pre>
<p>项目配置如下：</p>
<ul>
<li><p>users微服务工程下<code>application-dev.yml</code>的配置项：</p>
<pre><code class="python">testData:
  user:
      id: users微服务项目下配置文件中的id值
      name: users微服务项目下配置文件中的name值
      remark: users微服务项目下配置文件中的remark值（在本地文件系统中的配置和git远程仓库中均没有配置这个值）
</code></pre>
</li>
<li><p><code>jhipster-registry</code>下的<code>application-dev.yml</code>中配置：</p>
<pre><code class="python">spring:
  profiles:
      active: dev
      include: git
  cloud:
      config:
          server:
              git:
                  uri: https://github.com/chuiliu/config-repo
</code></pre>
</li>
<li><p>本地文件系统<code>file:./central-config</code>下<code>users.yml</code>的配置项：</p>
<pre><code class="python">testData:
  user:
      id: 本地文件系统配置文件中的id值
      name: 本地文件系统配置文件中的name值
</code></pre>
</li>
<li><p>远程git仓库下<code>users-dev.yml</code>的配置项：</p>
<pre><code class="python">testData:
  user:
      id: git远程仓库下配置文件中的id值
      name: git远程仓库下配置文件中的name值
</code></pre>
</li>
</ul>
<p>在swagger测试结果如下：<br><img src="http://o743aqnrb.bkt.clouddn.com/config%20server%20testtest-id.png" alt="http://o743aqnrb.bkt.clouddn.com/config%20server%20testtest-id.png"></p>
<p><img src="http://o743aqnrb.bkt.clouddn.com/config%20server%20testtest-name.png" alt="http://o743aqnrb.bkt.clouddn.com/config%20server%20testtest-name.png"></p>
<p>因为远程git仓库下没有配置remark的值，因此取到的值是微服务工程下配置的：<br><img src="http://o743aqnrb.bkt.clouddn.com/config%20server%20testtest-reamrk.png" alt="http://o743aqnrb.bkt.clouddn.com/config%20server%20testtest-reamrk.png"></p>
<p>参考：<a href="http://www.infoq.com/cn/articles/spring-cloud-service-wiring" target="_blank" rel="external">http://www.infoq.com/cn/articles/spring-cloud-service-wiring</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="JHipster_u4E2D_u4F7F_u7528Config_Server"><a href="#JHipster_u4E2D_u4F7F_u7528Config_Server" class="headerlink" title="JHipster中使用Con]]>
    </summary>
    
      <category term="JHipster" scheme="http://chuiliu.github.io/tags/JHipster/"/>
    
      <category term="Java" scheme="http://chuiliu.github.io/tags/Java/"/>
    
      <category term="Java" scheme="http://chuiliu.github.io/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JHipster 生成的 gateway 服务网关启动无法自动建表]]></title>
    <link href="http://chuiliu.github.io/2016/08/28/JHipster%E7%94%9F%E6%88%90%E7%9A%84gateway%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8%E6%97%A0%E6%B3%95%E8%87%AA%E5%8A%A8%E5%88%9B%E5%BB%BA%E8%A1%A8/"/>
    <id>http://chuiliu.github.io/2016/08/28/JHipster生成的gateway服务网关微服务启动无法自动创建表/</id>
    <published>2016-08-28T03:46:12.000Z</published>
    <updated>2016-09-26T15:42:49.456Z</updated>
    <content type="html"><![CDATA[<p>在使用JHipster生成的网关微服务启动时报错，无法生成用户数据库，导致无法进行后续的用户注册和登录，具体报错信息如下：</p>
<p>Incorrect table definition; there can be only one TIMESTAMP column with CURRENT_TIMESTAMP in DEFAULT or ON UPDATE clause [Failed SQL: CREATE TABLE gateway.jhi_user (id BIGINT AUTO_INCREMENT NOT NULL, login VARCHAR(50) NOT NULL, password_hash VARCHAR(60) NULL, first_name VARCHAR(50) NULL, last_name VARCHAR(50) NULL, email VARCHAR(100) NULL, activated BIT(1) NOT NULL, lang_key VARCHAR(5) NULL, activation_key VARCHAR(20) NULL, reset_key VARCHAR(20) NULL, created_by VARCHAR(50) NOT NULL, created_date timestamp DEFAULT NOW() NOT NULL, reset_date timestamp NULL, last_modified_by VARCHAR(50) NULL, last_modified_date timestamp DEFAULT NOW() NULL, CONSTRAINT PK_JHI_USER PRIMARY KEY (id), UNIQUE (email), UNIQUE (login))]</p>
<p>这个错误是数据库版本导致的，在一个mysql数据表中同时使用了多个timesatmp类型的字段并且都设置了默认值时，低版本MySQL不支持多个CURRENT_TIMESTAMP默认值，MySQL5.6.5以上版本则允许。</p>
<p>我是使用的数据库版本是MySQL5.1，重新安装为MySQL5.7后问题就解决了。</p>
<p>参考：<a href="http://stackoverflow.com/questions/4489548/why-there-can-be-only-one-timestamp-column-with-current-timestamp-in-default-cla" target="_blank" rel="external">http://stackoverflow.com/questions/4489548/why-there-can-be-only-one-timestamp-column-with-current-timestamp-in-default-cla</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在使用JHipster生成的网关微服务启动时报错，无法生成用户数据库，导致无法进行后续的用户注册和登录，具体报错信息如下：</p>
<p>Incorrect table definition; there can be only one TIMESTAMP column w]]>
    </summary>
    
      <category term="JHipster" scheme="http://chuiliu.github.io/tags/JHipster/"/>
    
      <category term="MySQL" scheme="http://chuiliu.github.io/tags/MySQL/"/>
    
      <category term="MySQL" scheme="http://chuiliu.github.io/categories/MySQL/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[MySQL 开启允许公网连接]]></title>
    <link href="http://chuiliu.github.io/2016/08/06/mysql%E5%BC%80%E5%90%AF%E5%85%81%E8%AE%B8%E5%85%AC%E7%BD%91%E8%BF%9E%E6%8E%A5/"/>
    <id>http://chuiliu.github.io/2016/08/06/mysql开启允许公网连接/</id>
    <published>2016-08-06T15:08:45.000Z</published>
    <updated>2016-08-06T16:02:07.931Z</updated>
    <content type="html"><![CDATA[<p>部署项目后，发现本地无法连接到MySQL远程数据库：<br>原因一：MySQL没有允许公网访问<br>查看是否公网访问：</p>
<pre><code>netstat
</code></pre><p>如果mysql的<code>Local Address</code>列的值是<code>127.0.0.1:3306</code>，则说明没有开启公网访问<br>解决方法：<br>修改mysql配置文件<code>/etc/mysql/my.cnf</code>，将<code>bind-address</code>的值改为<code>0.0.0.0</code></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>部署项目后，发现本地无法连接到MySQL远程数据库：<br>原因一：MySQL没有允许公网访问<br>查看是否公网访问：</p>
<pre><code>netstat
</code></pre><p>如果mysql的<code>Local Address</code>列的值]]>
    </summary>
    
      <category term="MySQL" scheme="http://chuiliu.github.io/tags/MySQL/"/>
    
      <category term="MySQL" scheme="http://chuiliu.github.io/categories/MySQL/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Redis 使用笔记（一）]]></title>
    <link href="http://chuiliu.github.io/2016/08/06/redis%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B01/"/>
    <id>http://chuiliu.github.io/2016/08/06/redis使用笔记1/</id>
    <published>2016-08-06T15:06:06.000Z</published>
    <updated>2016-12-02T16:46:08.227Z</updated>
    <content type="html"><![CDATA[<p>最近项目用到redis作为内存数据库，</p>
<p>windows系统启动redis</p>
<pre><code>redis-server
</code></pre><a id="more"></a>
<p>客户端连接到redis服务器</p>
<pre><code>redis-cli
</code></pre><h3 id="Linux_u4E0B_u7684_u64CD_u4F5C"><a href="#Linux_u4E0B_u7684_u64CD_u4F5C" class="headerlink" title="Linux下的操作"></a>Linux下的操作</h3><ol>
<li>下载Redis<pre><code class="shell">wget http://download.redis.io/releases/redis-3.2.3.tar.gz
</code></pre>
</li>
<li>解压<pre><code class="shell">tar xzf redis-3.2.3.tar.gz
</code></pre>
</li>
<li>编译<pre><code>cd redis-3.2.3
make
</code></pre></li>
</ol>
<p>通过redis客户端连接到redis服务器</p>
<pre><code>redis-cli
</code></pre><p>连接到服务器后，可以使用info命令查看和操作redis数据库：<br>查看redis的详细信息</p>
<pre><code>info
</code></pre><p>操作</p>
<pre><code>127.0.0.1:6379&gt; set key hello
OK
127.0.0.1:6379&gt; get key
&quot;hello&quot;
127.0.0.1:6379&gt;
</code></pre><p>如果需要redis在以后台程序的方式运行，以下命令启动</p>
<pre><code>redis-server &amp;
</code></pre><p>或者将<code>redis.conf</code>配置文件中的<code>daemonize</code>值修改为<code>yes</code></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近项目用到redis作为内存数据库，</p>
<p>windows系统启动redis</p>
<pre><code>redis-server
</code></pre>]]>
    
    </summary>
    
      <category term="Redis" scheme="http://chuiliu.github.io/tags/Redis/"/>
    
      <category term="Redis" scheme="http://chuiliu.github.io/categories/Redis/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Redis 启动失败]]></title>
    <link href="http://chuiliu.github.io/2016/07/31/redis%E5%90%AF%E5%8A%A8%E5%A4%B1%E8%B4%A5/"/>
    <id>http://chuiliu.github.io/2016/07/31/redis启动失败/</id>
    <published>2016-07-31T11:39:12.000Z</published>
    <updated>2016-10-19T16:02:24.169Z</updated>
    <content type="html"><![CDATA[<p>安装redis之后一直启动失败，报错内容如下：</p>
<blockquote>
<p>C:\Users\Administrator&gt;redis-server<br>[8468] 31 Jul 18:55:29.453 #<br>The Windows version of Redis allocates a memory mapped heap for sharing with<br>the forked process used for persistence operations. In order to share this<br>memory, Windows allocates from the system paging file a portion equal to the<br>size of the Redis heap. At this time there is insufficient contiguous free<br>space available in the system paging file for this operation (Windows error<br>0x5AF). To work around this you may either increase the size of the system<br>paging file, or decrease the size of the Redis heap with the –maxheap flag.<br>Sometimes a reboot will defragment the system paging file sufficiently for<br>this operation to complete successfully.</p>
<p>Please see the documentation included with the binary distributions for more<br>details on the –maxheap flag.</p>
<p>Redis can not continue. Exiting.</p>
</blockquote>
<p>以上错误描述说减少<code>--maxheap</code>的值，因此解决方法：</p>
<pre><code>redis-server --maxheap 1024000000
</code></pre><pre><code>C:\Users\Administrator&gt;redis-server --maxheap 1024000000
                _._
           _.-``__ &#39;&#39;-._
      _.-``    `.  `_.  &#39;&#39;-._           Redis 2.8.2402 (00000000/0) 64 bit
  .-`` .-```.  ```\/    _.,_ &#39;&#39;-._
 (    &#39;      ,       .-`  | `,    )     Running in stand alone mode
 |`-._`-...-` __...-.``-._|&#39;` _.-&#39;|     Port: 6379
 |    `-._   `._    /     _.-&#39;    |     PID: 8296
  `-._    `-._  `-./  _.-&#39;    _.-&#39;
 |`-._`-._    `-.__.-&#39;    _.-&#39;_.-&#39;|
 |    `-._`-._        _.-&#39;_.-&#39;    |           http://redis.io
  `-._    `-._`-.__.-&#39;_.-&#39;    _.-&#39;
 |`-._`-._    `-.__.-&#39;    _.-&#39;_.-&#39;|
 |    `-._`-._        _.-&#39;_.-&#39;    |
  `-._    `-._`-.__.-&#39;_.-&#39;    _.-&#39;
      `-._    `-.__.-&#39;    _.-&#39;
          `-._        _.-&#39;
              `-.__.-&#39;
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<p>安装redis之后一直启动失败，报错内容如下：</p>
<blockquote>
<p>C:\Users\Administrator&gt;redis-server<br>[8468] 31 Jul 18:55:29.453 #<br>The Windows version]]>
    </summary>
    
      <category term="Redis" scheme="http://chuiliu.github.io/tags/Redis/"/>
    
      <category term="Redis" scheme="http://chuiliu.github.io/categories/Redis/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[MySQL 使用笔记]]></title>
    <link href="http://chuiliu.github.io/2016/07/31/mysql%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
    <id>http://chuiliu.github.io/2016/07/31/mysql使用笔记/</id>
    <published>2016-07-31T11:35:38.000Z</published>
    <updated>2016-11-14T16:00:30.567Z</updated>
    <content type="html"><![CDATA[<h4 id="MySQL_u4FEE_u6539_u5BC6_u7801"><a href="#MySQL_u4FEE_u6539_u5BC6_u7801" class="headerlink" title="MySQL修改密码"></a>MySQL修改密码</h4><ul>
<li>修改root密码<pre><code class="sql">set password for &#39;root&#39;@&#39;localhost&#39;=password(&#39;new password&#39;);
</code></pre>
</li>
</ul>
<h4 id="u521B_u5EFA_u7528_u6237_u5E76_u6388_u6743"><a href="#u521B_u5EFA_u7528_u6237_u5E76_u6388_u6743" class="headerlink" title="创建用户并授权"></a>创建用户并授权</h4><ul>
<li>创建用户<pre><code>CREATE USER &#39;username&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;username&#39;;
</code></pre></li>
<li>授权<pre><code>GRANT all ON databasename.* TO &#39;username&#39;@&#39;localhost&#39;;
</code></pre></li>
</ul>
<h4 id="u4F7F_u7528sum_u65F6_u5982_u679C_u6CA1_u8BB0_u5F55_u4E0D_u8FD4_u56DEnull_uFF0C_u9700_u8981_u8FD4_u56DE0_u7684_u89E3_u51B3_u65B9_u6CD5"><a href="#u4F7F_u7528sum_u65F6_u5982_u679C_u6CA1_u8BB0_u5F55_u4E0D_u8FD4_u56DEnull_uFF0C_u9700_u8981_u8FD4_u56DE0_u7684_u89E3_u51B3_u65B9_u6CD5" class="headerlink" title="使用sum时如果没记录不返回null，需要返回0的解决方法"></a>使用sum时如果没记录不返回null，需要返回0的解决方法</h4><pre><code>select coalesce(sum(price), 0) as total group by type;
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<h4 id="MySQL_u4FEE_u6539_u5BC6_u7801"><a href="#MySQL_u4FEE_u6539_u5BC6_u7801" class="headerlink" title="MySQL修改密码"></a>MySQL修改密码</h4><ul>
]]>
    </summary>
    
      <category term="MySQL" scheme="http://chuiliu.github.io/tags/MySQL/"/>
    
      <category term="MySQL" scheme="http://chuiliu.github.io/categories/MySQL/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用iconfont字体图标]]></title>
    <link href="http://chuiliu.github.io/2016/07/02/%E4%BD%BF%E7%94%A8iconfont%E5%AD%97%E4%BD%93%E5%9B%BE%E6%A0%87/"/>
    <id>http://chuiliu.github.io/2016/07/02/使用iconfont字体图标/</id>
    <published>2016-07-02T08:30:47.000Z</published>
    <updated>2016-10-19T15:59:34.895Z</updated>
    <content type="html"><![CDATA[<p>最近在做移动web app项目，前端很多地方需要用到小图标，移动端不像PC端，图标的选择几乎不会去用到图片，因为要做不同屏幕的适配，一般更好的选择是使用字体图标，这样就可以通过CSS随意控制图标的大小和颜色了。项目用到的是<code>iconfont</code>，下面就介绍下如何使用 <a href="https://icomoon.io/app/#/select" target="_blank" rel="external">icomoon图标制作工具</a> 来快速生成字体图标。</p>
<p>首先到<a href="http://iconfont.cn/" target="_blank" rel="external">http://iconfont.cn/</a>，选择到需要用到的图标。<br>通过搜索找一个微信图标：<br><img src="http://o743aqnrb.bkt.clouddn.com/20160702/iconfont-1.png" alt=""></p>
<p>选择或者自己填写合适的颜色，然后选择SVG下载:<br><img src="http://o743aqnrb.bkt.clouddn.com/20160702/iconfont-2.png" alt=""></p>
<p>下载完成后，打开 <a href="https://icomoon.io/app/#/select" target="_blank" rel="external">icomoon图标制作工具</a> ，点击左上角的“Import Icons”将刚刚下载的 weixin.svg 导入。<br><img src="http://o743aqnrb.bkt.clouddn.com/20160702/iconfont-3.png" alt=""></p>
<p>这时候可以在页面看到刚刚的微信图标成功上传，你只需鼠标选中界面上任何需要用到的图标，例如我选中了刚刚上传的微信图标、铅笔图标、音乐图标，点击右下角的“Generate Font”按钮进行创建，每个图标右边的输入框将对应到时候生成的类名<code>icon-*</code>，可以直接修改，再点击dowload下载就行了。<br><img src="http://o743aqnrb.bkt.clouddn.com/20160702/iconfont-4.png" alt=""><br><img src="http://o743aqnrb.bkt.clouddn.com/20160702/iconfont-5.png" alt=""></p>
<p>icomoon将自动生成css文件和示例<code>demo.html</code>，使用时只需要添加该图标对应的class就可以。</p>
<pre><code class="html">&lt;span class=&quot;icon-weixin&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;icon-pencil&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;icon-images&quot;&gt;&lt;/span&gt;
</code></pre>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近在做移动web app项目，前端很多地方需要用到小图标，移动端不像PC端，图标的选择几乎不会去用到图片，因为要做不同屏幕的适配，一般更好的选择是使用字体图标，这样就可以通过CSS随意控制图标的大小和颜色了。项目用到的是<code>iconfont</code>，下面就介]]>
    </summary>
    
      <category term="前端" scheme="http://chuiliu.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="前端" scheme="http://chuiliu.github.io/categories/fe/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CSS 相关浏览器兼容问题 [1]]]></title>
    <link href="http://chuiliu.github.io/2016/06/14/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9/"/>
    <id>http://chuiliu.github.io/2016/06/14/浏览器兼容/</id>
    <published>2016-06-14T14:26:29.000Z</published>
    <updated>2016-10-21T16:56:58.256Z</updated>
    <content type="html"><![CDATA[<h4 id="u95EE_u98981_uFF1AIE7_u4E0B_uFF0C_u5982_u679C_u6D6E_u52A8_u5143_u7D20_u524D_u9762_u7684_u5144_u5F1F_u5143_u7D20_u4E2D_u5B58_u5728_u884C_u5185_u5143_u7D20_uFF0C_u6D6E_u52A8_u5143_u7D20_u4F1A_u6389_u5230_u4E0B_u4E00_u884C"><a href="#u95EE_u98981_uFF1AIE7_u4E0B_uFF0C_u5982_u679C_u6D6E_u52A8_u5143_u7D20_u524D_u9762_u7684_u5144_u5F1F_u5143_u7D20_u4E2D_u5B58_u5728_u884C_u5185_u5143_u7D20_uFF0C_u6D6E_u52A8_u5143_u7D20_u4F1A_u6389_u5230_u4E0B_u4E00_u884C" class="headerlink" title="问题1：IE7下，如果浮动元素前面的兄弟元素中存在行内元素，浮动元素会掉到下一行"></a>问题1：IE7下，如果浮动元素前面的兄弟元素中存在行内元素，浮动元素会掉到下一行</h4><pre><code class="html">&lt;div class=&quot;container&quot;&gt;
    &lt;span&gt;span&lt;/span&gt;
    &lt;span&gt;span&lt;/span&gt;
    &lt;div class=&quot;left&quot;&gt;左浮动的div&lt;/div&gt;
    &lt;div class=&quot;right&quot;&gt;右浮动的div&lt;/div&gt;
&lt;/div&gt;
</code></pre>
<p>chrome，firefox下：<br><img src="http://o743aqnrb.bkt.clouddn.com/20160614/2016-06-14_234454.png" alt=""><br>IE7下：<br><img src="http://o743aqnrb.bkt.clouddn.com/20160614/2016-06-14_234534.png" alt=""><br>解决：</p>
<ol>
<li>针对IE7为浮动元素设置负的margin-top值</li>
<li>将浮动元素写到行内元素前面<pre><code class="html">&lt;div class=&quot;container&quot;&gt;
 &lt;div class=&quot;left&quot;&gt;左浮动的div&lt;/div&gt;
 &lt;div class=&quot;right&quot;&gt;右浮动的div&lt;/div&gt;
 &lt;span&gt;span&lt;/span&gt;
 &lt;span&gt;span&lt;/span&gt;
&lt;/div&gt;
</code></pre>
</li>
</ol>
<h4 id="u95EE_u98982_uFF1AIE6_u3001IE7_u4E0B_uFF0C_u7ED9_u5143_u7D20_u8BBE_u7F6Emin-width_u4E0D_u8D77_u4F5C_u7528"><a href="#u95EE_u98982_uFF1AIE6_u3001IE7_u4E0B_uFF0C_u7ED9_u5143_u7D20_u8BBE_u7F6Emin-width_u4E0D_u8D77_u4F5C_u7528" class="headerlink" title="问题2：IE6、IE7下，给元素设置min-width不起作用"></a>问题2：IE6、IE7下，给元素设置min-width不起作用</h4>]]></content>
    <summary type="html">
    <![CDATA[<h4 id="u95EE_u98981_uFF1AIE7_u4E0B_uFF0C_u5982_u679C_u6D6E_u52A8_u5143_u7D20_u524D_u9762_u7684_u5144_u5F1F_u5143_u7D20_u4E2D_u5B58_u5728_u8]]>
    </summary>
    
      <category term="CSS" scheme="http://chuiliu.github.io/tags/CSS/"/>
    
      <category term="前端" scheme="http://chuiliu.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="浏览器兼容" scheme="http://chuiliu.github.io/tags/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9/"/>
    
      <category term="前端" scheme="http://chuiliu.github.io/categories/fe/"/>
    
      <category term="CSS" scheme="http://chuiliu.github.io/categories/fe/CSS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[去除 inline-block 之间的空白间隔]]></title>
    <link href="http://chuiliu.github.io/2016/05/16/remove-inline-block-space/"/>
    <id>http://chuiliu.github.io/2016/05/16/remove-inline-block-space/</id>
    <published>2016-05-16T02:25:12.000Z</published>
    <updated>2016-10-19T15:20:07.851Z</updated>
    <content type="html"><![CDATA[<p>当多个连续的inline-block元素水平方向排列时，各个元素之间会出现空白间隔，这是由于空白字符（空格或换行）引起的。</p>
<h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><pre><code class="html">&lt;div id=&quot;container&quot;&gt;
    &lt;div class=&quot;cell&quot;&gt;cell1&lt;/div&gt;
    &lt;div class=&quot;cell&quot;&gt;cell2&lt;/div&gt;
    &lt;div class=&quot;cell&quot;&gt;cell3&lt;/div&gt;
    &lt;div class=&quot;cell&quot;&gt;cell4&lt;/div&gt;
&lt;/div&gt;
</code></pre>
<h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><pre><code class="css">#container {
    background: #bbada0;
    width: 215px;
    padding: 10px;
}
#container .cell {
    width: 50px;
    height: 25px;
    display: inline-block;
    zoom: 1;
    *display: inline;
    background: #cdc1b4;
    text-align: center;
}
</code></pre>
<p>效果是这样的:<br><img src="http://o743aqnrb.bkt.clouddn.com/20160516/QQ%E6%88%AA%E5%9B%BE20160516125546.png" alt=""><br>有时候因为实际布局需要，或者为了避免不必要的影响，必须去除空白，下面总结了几种常用的解决方案：</p>
<ul>
<li>移除空白字符，全部写在同一行<pre><code class="html">&lt;div id=&quot;container&quot;&gt;
  &lt;div class=&quot;cell&quot;&gt;cell1&lt;/div&gt;&lt;div class=&quot;cell&quot;&gt;cell2&lt;/div&gt;&lt;div class=&quot;cell&quot;&gt;cell3&lt;/div&gt;&lt;div class=&quot;cell&quot;&gt;cell4&lt;/div&gt;
&lt;/div&gt;
</code></pre>
</li>
<li>改变换行的位置<pre><code class="html">&lt;div id=&quot;container&quot;&gt;
  &lt;div class=&quot;cell&quot;&gt;
  cell1&lt;/div&gt;&lt;div class=&quot;cell&quot;&gt;
  cell2&lt;/div&gt;&lt;div class=&quot;cell&quot;&gt;
  cell3&lt;/div&gt;&lt;div class=&quot;cell&quot;&gt;
  cell4&lt;/div&gt;
&lt;/div&gt;
</code></pre>
</li>
<li>设置父元素的font-size为0，再为每个inline-block对象设置font-size的值<pre><code class="css">#container {
  background: #bbada0;
  width: 215px;
  padding: 10px;
  font-size: 0;
}
</code></pre>
最终效果是这样的:<br><img src="http://o743aqnrb.bkt.clouddn.com/20160516/QQ%E6%88%AA%E5%9B%BE20160516145701.png" alt=""></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>当多个连续的inline-block元素水平方向排列时，各个元素之间会出现空白间隔，这是由于空白字符（空格或换行）引起的。</p>
<h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML<]]>
    </summary>
    
      <category term="CSS" scheme="http://chuiliu.github.io/tags/CSS/"/>
    
      <category term="前端" scheme="http://chuiliu.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="前端" scheme="http://chuiliu.github.io/categories/fe/"/>
    
      <category term="CSS" scheme="http://chuiliu.github.io/categories/fe/CSS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[空格的 ASCII 码]]></title>
    <link href="http://chuiliu.github.io/2016/04/24/about-space-2/"/>
    <id>http://chuiliu.github.io/2016/04/24/about-space-2/</id>
    <published>2016-04-24T13:42:58.000Z</published>
    <updated>2016-04-24T15:01:30.521Z</updated>
    <content type="html"><![CDATA[<p>今天在用爬虫抓取网页数据时，最终抓取得到的字符串是带空格的，很神奇的是这个时候用<code>java.lang.String.trim()</code>方法没有能把空格去掉。折腾了很久才发现是因为抓取的网页上表格数据中的每一个单元格后都带有<code>&amp;nbsp;</code>。</p>
<p>最后发现，空格对应的ASCII竟然有两个，一个是最常见的 <strong>0x20(十进制32)</strong>，另一个是 <strong>0xA0(十进制160)</strong>，Java中String的<code>trim()</code>方法只能去掉ASCII码为32的空格，对<code>&amp;nbsp;</code>转换而成的空格是无效的。</p>
<p>解决方法：</p>
<pre><code class="java">String newStr = str.replaceAll(&quot;[\\s\\u00A0]+$&quot;, &quot;&quot;);
</code></pre>
<p>附：<a href="http://www.litefeel.com/tools/ascii.php" target="_blank" rel="external">ASCII码表</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>今天在用爬虫抓取网页数据时，最终抓取得到的字符串是带空格的，很神奇的是这个时候用<code>java.lang.String.trim()</code>方法没有能把空格去掉。折腾了很久才发现是因为抓取的网页上表格数据中的每一个单元格后都带有<code>&amp;nbsp;<]]>
    </summary>
    
      <category term="Java" scheme="http://chuiliu.github.io/tags/Java/"/>
    
      <category term="编码" scheme="http://chuiliu.github.io/tags/%E7%BC%96%E7%A0%81/"/>
    
      <category term="Java" scheme="http://chuiliu.github.io/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何撤销下拉框选中的值]]></title>
    <link href="http://chuiliu.github.io/2016/04/13/undo-a-select-change/"/>
    <id>http://chuiliu.github.io/2016/04/13/undo-a-select-change/</id>
    <published>2016-04-13T13:25:50.000Z</published>
    <updated>2016-05-16T08:00:14.138Z</updated>
    <content type="html"><![CDATA[<p>昨天修bug时发现，系统有个功能是选择文字模板，如果选择的模板改变，会弹窗确认框选择是否覆盖之前的内容，当选择否的时候，不覆盖当前内容，但是下拉框的值变了，这就出现了不对应，所以应该在选择否的时候，撤销下拉框的本次选中。</p>
<p>解决这个问题可以使用jQuery提供的 <a href="http://api.jquery.com/jQuery.data/" target="_blank" rel="external">$.data()</a> 来把值赋给一个自定义属性，并在每次确认改变选中下拉框的值的时候更新这个属性的值。</p>
<p>Example：</p>
<pre><code class="html">&lt;select name=&quot;template&quot;&gt;
    &lt;option value=&quot;template1&quot;&gt;模板一&lt;/option&gt;
    &lt;option value=&quot;template2&quot;&gt;模板二&lt;/option&gt;
    &lt;option value=&quot;template3&quot;&gt;模板三&lt;/option&gt;
&lt;/select&gt;
&lt;div id=&quot;target&quot;&gt;&lt;/div&gt;
</code></pre>
<pre><code class="javascript">$(&#39;#template&#39;).change(function() {
    var selected = $(this).val();
    var text = $.trim($(&#39;#target&#39;).text());

    if(text) {
        if(confirm(&#39;是否覆盖已有模板？&#39;)) {
            $(&#39;#target&#39;).text(selected);
        } else {
            $(&#39;#template&#39;).val($.data(this, &#39;current&#39;));
        }
    } else {
        $(&#39;#target&#39;).text(selected);
    }

    $.data(this, &#39;current&#39;, $(this).val());
});
</code></pre>
<p><strong>演示</strong>：<br>选择文字模板：<select name="template" id="template"><br>    <option value="template1">模板一</option><br>    <option value="template2">模板二</option><br>    <option value="template3">模板三</option><br></select></p>
<p><div style="color:ccc;width:300px;height:100px;border:1px solid #ccc;padding: 5px;" id="target"></div></p>
<hr>
<p>参考：<a href="http://stackoverflow.com/questions/3963855/jquery-how-to-undo-a-select-change" target="_blank" rel="external">jQuery how to undo a select change</a></p>
<script src="//cdn.bootcss.com/jquery/2.2.1/jquery.min.js"></script>
<script type="text/javascript">
    $('#template').change(function() {
        var selected = $(this).val();
        var text = $.trim($('#target').text());

        if(text) {
            if(confirm('是否覆盖已有模板？')) {
                $('#target').text(selected);
            } else {
                $('#template').val($.data(this, 'current'));
            }
        } else {
            $('#target').text(selected);
        }
        $.data(this, 'current', $(this).val());
    });
</script>
]]></content>
    <summary type="html">
    <![CDATA[<p>昨天修bug时发现，系统有个功能是选择文字模板，如果选择的模板改变，会弹窗确认框选择是否覆盖之前的内容，当选择否的时候，不覆盖当前内容，但是下拉框的值变了，这就出现了不对应，所以应该在选择否的时候，撤销下拉框的本次选中。</p>
<p>解决这个问题可以使用jQuery提供的]]>
    </summary>
    
      <category term="Javascript" scheme="http://chuiliu.github.io/tags/Javascript/"/>
    
      <category term="jQuery" scheme="http://chuiliu.github.io/tags/jQuery/"/>
    
      <category term="前端" scheme="http://chuiliu.github.io/categories/fe/"/>
    
      <category term="Javascript" scheme="http://chuiliu.github.io/categories/fe/Javascript/"/>
    
  </entry>
  
</feed>
